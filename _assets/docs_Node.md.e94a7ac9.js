import{g as n,f as s,G as a}from"./common-bec3f312.js";const p='{"title":"前端笔记 | Node","frontmatter":{"date":"2022-01-28","title":"前端笔记 | Node","tags":["前端笔记","Node"],"describe":"Node 学习笔记"},"headers":[{"level":2,"title":"一、初识 Node.js 与内置模块","slug":"一、初识-node-js-与内置模块"},{"level":3,"title":"1. 初始 Node.js","slug":"_1-初始-node-js"},{"level":3,"title":"2. fs 文件系统模块","slug":"_2-fs-文件系统模块"},{"level":3,"title":"3. path 路径模块","slug":"_3-path-路径模块"},{"level":3,"title":"3. http 模块","slug":"_3-http-模块"},{"level":2,"title":"二、模块化开发","slug":"二、模块化开发"},{"level":3,"title":"1. Node.js 中的模块化","slug":"_1-node-js-中的模块化"},{"level":3,"title":"2. npm 与包","slug":"_2-npm-与包"},{"level":3,"title":"3. 模块加载机制","slug":"_3-模块加载机制"},{"level":2,"title":"三、Node.js 异步编程","slug":"三、node-js-异步编程"},{"level":3,"title":"1. 同步 API 异步 API","slug":"_1-同步-api-异步-api"},{"level":3,"title":"2. Promise","slug":"_2-promise"},{"level":3,"title":"3. 异步函数 async","slug":"_3-异步函数-async"},{"level":3,"title":"4. try catch","slug":"_4-try-catch"},{"level":2,"title":"四、Express","slug":"四、express"},{"level":3,"title":"1. Express 的基本使用","slug":"_1-express-的基本使用"},{"level":3,"title":"2. Express 路由","slug":"_2-express-路由"},{"level":3,"title":"3. Express 中间件","slug":"_3-express-中间件"},{"level":3,"title":"4. 跨域问题","slug":"_4-跨域问题"},{"level":3,"title":"5. 使用 Express 写接口","slug":"_5-使用-express-写接口"},{"level":2,"title":"五、数据库","slug":"五、数据库"},{"level":3,"title":"1. mongoDB","slug":"_1-mongodb"}],"relativePath":"docs/Node.md","lastUpdated":1645356873622.5444}';var t={};const o=a('<h2 id="一、初识-node-js-与内置模块"><a class="header-anchor" href="#一、初识-node-js-与内置模块" aria-hidden="true">#</a> 一、初识 Node.js 与内置模块</h2><h3 id="_1-初始-node-js"><a class="header-anchor" href="#_1-初始-node-js" aria-hidden="true">#</a> 1. 初始 Node.js</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境</p><p>官网地址： <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener noreferrer">https://nodejs.org/zh-cn/</a></p><ul><li>浏览器是 JavaScript 的前端运行环境</li><li>Node.js 是 JavaScript 的后端运行环境</li><li>Node.js 中无法调用 DOM 和 BOM 等浏览器内置 API</li></ul><p>Node.js 是由 ECMAScript 及 Node 环境提供的一些附加 API 组成的，包括文件、网络、路径等等一些更加强大的 API</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3Wfe.png" alt="HO3Wfe.png"></p><p>Node.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和 API</p><p>然而，基于 Node.js 提供的这些基础能，很多强大的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位：</p><ol><li>基于 Express 框架（<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener noreferrer">http://www.expressjs.com.cn/</a>），可以快速构建 Web 应用</li><li>基于 Electron 框架（<a href="https://electronjs.org/" target="_blank" rel="noopener noreferrer">https://electronjs.org/</a>），可以构建跨平台的桌面应用</li><li>基于 restify 框架（<a href="http://restify.com/" target="_blank" rel="noopener noreferrer">http://restify.com/</a>），可以快速构建 API 接口项目</li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发、 etc…</li></ol><p>可以在官网下载安装 Node</p><p>查看已安装的 Node.js 的版本号，在终端输入 <code>node –v</code></p><p>所有 ECMAScript 语法在 Node 环境中都可以使用</p><p>在 Node.js 环境中执行 JavaScript 代码</p><p>在终端中输入 <code>node 要执行的js文件的路径</code></p><h3 id="_2-fs-文件系统模块"><a class="header-anchor" href="#_2-fs-文件系统模块" aria-hidden="true">#</a> 2. fs 文件系统模块</h3><p>fs 模块是 Node.js 官方提供的、用来操作文件的模块，它提供了一系列的方法和属性，用来满足用户对文件的操作需求</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 读取文件内容</span>\n<span class="token comment">// fs.readFile(&#39;文件路径/文件名称&#39;[,&#39;文件编码&#39;], callback);</span>\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./01.helloworld.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> doc</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果文件读取出错err 是一个对象 包含错误信息</span>\n  <span class="token comment">// 如果文件读取正确 err是 null</span>\n  <span class="token comment">// doc 是文件读取的结果</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 写入文件内容</span>\n<span class="token comment">// fs.writeFile(&#39;文件路径/文件名称&#39;, &#39;数据&#39;, callback);</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./demo.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;即将要写入的内容&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件内容写入成功&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>重复调用 fs.writeFile() 写入同一个文件，新写入的内容会覆盖之前的旧内容</p><h3 id="_3-path-路径模块"><a class="header-anchor" href="#_3-path-路径模块" aria-hidden="true">#</a> 3. path 路径模块</h3><p>path 模块是 Node.js 官方提供的、用来处理路径的模块，它提供了一系列的方法和属性，用来满足用户对路径的处理需求</p><p>为什么要进行路径拼接</p><ul><li>不同操作系统的路径分隔符不统一</li><li>/public/uploads/avatar</li><li>Windows 上是 <code>\\</code> <code>/</code> 都可以</li><li>Linux 上是 <code>/</code></li></ul><p>路径拼接语法 <code>path.join(&#39;路径&#39;, &#39;路径&#39;, ...)</code></p><div class="language-jsx"><pre><code><span class="token comment">// 导入path模块</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 路径拼接</span>\n<span class="token keyword">let</span> finialPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;itcast&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c.css&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 输出结果 itcast\\a\\b\\c.css</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finialPath<span class="token punctuation">)</span>\n</code></pre></div><p>获取路径中的文件名 <code>path.basename()</code></p><div class="language-jsx"><pre><code><span class="token comment">// 定义文件的存放路径</span>\n<span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">&#39;/a/b/c/index.html&#39;</span>\n\n<span class="token comment">// path.basename(路径字符串[,文件扩展名])</span>\n<span class="token keyword">const</span> fullName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span> <span class="token comment">// index.html</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> nameWithoutExt <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameWithoutExt<span class="token punctuation">)</span> <span class="token comment">// index</span>\n</code></pre></div><p>获取路径中的文件扩展名</p><div class="language-jsx"><pre><code><span class="token comment">// 这是文件的存放路径</span>\n<span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">&#39;/a/b/c/index.html&#39;</span>\n\n<span class="token keyword">const</span> fext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fext<span class="token punctuation">)</span> 、<span class="token comment">// .html</span>\n</code></pre></div><p>相对路径 VS 绝对路径</p><ul><li>大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录</li><li>在读取文件或者设置文件路径时都会选择绝对路径</li><li>使用 <code>__dirname</code> 获取当前文件所在的绝对路径</li></ul><div class="language-jsx"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;01.helloworld.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;01.helloworld.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> doc</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="_3-http-模块"><a class="header-anchor" href="#_3-http-模块" aria-hidden="true">#</a> 3. http 模块</h3><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块，通过 http 模块提供的 http.createServer() 方法，就能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务</p><h4 id="创建最基本的-web-服务器"><a class="header-anchor" href="#创建最基本的-web-服务器" aria-hidden="true">#</a> 创建最基本的 web 服务器</h4><ol><li>导入 http 模块</li><li>创建 web 服务器实例</li><li>为服务器实例绑定 request 事件， 监听客户端的请求</li><li>启动服务器</li></ol><div class="language-jsx"><pre><code><span class="token comment">// 1. 导入 http 模块</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2. 创建 web 服务器实例</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3. 为服务器实例绑定 request 事件，监听客户端的请求</span>\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Someone visit our web server.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 启动服务器</span>\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server running at http://127.0.0.1:8080&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>req 请求对象和 res 响应对象</strong></p><div class="language-jsx"><pre><code><span class="token comment">// req 是请求对象，包含了与客户端相关的数据和属性</span>\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// req.url 是客户端请求的 URL 地址</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url\n  <span class="token comment">// req.method 是客户端请求的 method 类型</span>\n  <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method\n  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, and request method is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n\n  <span class="token comment">// 调用 res.end() 方法，向客户端响应一些内容</span>\n  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>解决中文乱码问题</strong></p><p>当调用 res.end() 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式：</p><div class="language-jsx"><pre><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 定义一个字符串，包含中文的内容</span>\n  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您请求的 URL 地址是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，请求的 method 类型为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\n  <span class="token comment">// 调用 res.setHeader() 方法，设置 Content-Type 响应头，解决中文乱码的问题</span>\n  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html; charset=utf-8&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// res.end() 将内容响应给客户端</span>\n  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="根据不同的-url-响应不同的-html-内容"><a class="header-anchor" href="#根据不同的-url-响应不同的-html-内容" aria-hidden="true">#</a> 根据不同的 url 响应不同的 html 内容</h4><ol><li>获取请求的 url 地址</li><li>设置默认的响应内容为 404 Not found</li><li>判断用户请求的是否为 / 或 /index.html 首页</li><li>判断用户请求的是否为 /about.html 关于页面</li><li>设置 Content-Type 响应头，防止中文乱码</li><li>使用 res.end() 把内容响应给客户端</li></ol><div class="language-jsx"><pre><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 1. 获取请求的 url 地址</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url\n  <span class="token comment">// 2. 设置默认的响应内容为 404 Not found</span>\n  <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#39;</span>\n  <span class="token comment">// 3. 判断用户请求的是否为 / 或 /index.html 首页</span>\n  <span class="token comment">// 4. 判断用户请求的是否为 /about.html 关于页面</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">||</span> url <span class="token operator">===</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    content <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;首页&lt;/h1&gt;&#39;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&#39;/about.html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    content <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;关于页面&lt;/h1&gt;&#39;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 5. 设置 Content-Type 响应头，防止中文乱码</span>\n  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html; charset=utf-8&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 6. 使用 res.end() 把内容响应给客户端</span>\n  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server running at http://127.0.0.1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="二、模块化开发"><a class="header-anchor" href="#二、模块化开发" aria-hidden="true">#</a> 二、模块化开发</h2><p>编程领域中的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块</p><p>把代码进行模块化拆分的好处：</p><ol><li>提高了代码的复用性</li><li>提高了代码的可维护性</li><li>可以实现按需加载</li></ol><h3 id="_1-node-js-中的模块化"><a class="header-anchor" href="#_1-node-js-中的模块化" aria-hidden="true">#</a> 1. Node.js 中的模块化</h3><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是：</p><ol><li>内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</li><li>自定义模块（用户创建的每个 .js 文件，都是自定义模块）</li><li>第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</li></ol><p><strong>加载模块</strong> <code>requeire()</code></p><div class="language-jsx"><pre><code><span class="token comment">// 1. 加载内置的 fs 模块</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2. 加载用户的自定义模块</span>\n<span class="token comment">// 注意：在使用 require 加载用户自定义模块期间，</span>\n<span class="token comment">// 可以省略 .js 的后缀名</span>\n<span class="token keyword">const</span> custom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./custom.js&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3. 加载第三方模块</span>\n<span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;moment&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>注意：使用 require() 方法加载其它模块时，会执行被加载模块中的代码</p><p><strong>模块作用域</strong></p><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</p><p>模块作用域的好处：防止了全局变量污染的问题</p><p><strong>向外共享模块作用域中的成员</strong></p><p>在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息</p><p>在自定义模块中，可以使用 <code>module.exports</code> 对象，将模块内的成员共享出去，供外界使用</p><p>外界用 <code>require()</code> 方法导入自定义模块时，得到的就是 module.exports 所指向的对象</p><p>由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码， Node 提供了 exports 对象，默认情况下， exports 和 module.exports 指向同一个对象，最终共享的结果，还是以 module.exports 指向的对象为准</p><p>模块成员导出</p><div class="language-jsx"><pre><code><span class="token comment">// a.js</span>\n<span class="token comment">// 在模块内部定义变量</span>\n<span class="token keyword">let</span> version <span class="token operator">=</span> <span class="token number">1.0</span>\n<span class="token comment">// 在模块内部定义方法</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您好, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 向模块外部导出数据</span>\nexports<span class="token punctuation">.</span>version <span class="token operator">=</span> version\nexports<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> sayHi\n</code></pre></div><p>模块成员的导入</p><div class="language-jsx"><pre><code><span class="token comment">// b.js</span>\n<span class="token comment">// 在b.js模块中导入模块a 导入模块时后缀可以省略</span>\n<span class="token comment">// let a = require(&#39;./b.js&#39;);</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 输出b模块中的version变量</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>version<span class="token punctuation">)</span>\n<span class="token comment">// 调用b模块中的sayHi方法 并输出其返回值</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">&#39;黑马讲师&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>共享成员时的注意点：使用 require() 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">greeting</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">100</span>\nexports<span class="token punctuation">.</span>x <span class="token operator">=</span> x\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>greeting <span class="token operator">=</span> greeting\n<span class="token comment">// 当exports对象和moudle.exports对象指向的不是同一个对象时 以module.exports为准</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span>\n<span class="token punctuation">}</span>\n\nexports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./04.module.exports.js&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;zhangsan&#39; }</span>\n</code></pre></div><h3 id="_2-npm-与包"><a class="header-anchor" href="#_2-npm-与包" aria-hidden="true">#</a> 2. npm 与包</h3><p>Node.js 中的第三方模块又叫做包</p><p><a href="http://npmjs.com" target="_blank" rel="noopener noreferrer">npmjs.com</a>：第三方模块的存储和分发仓库</p><p>npm (node package manager) ：node 的第三方模块管理工具，这个包管理工具随着 Node.js 的安装包一起被安装到了用户的电脑上</p><p>在终端中执行 <code>npm -v</code> 命令，来查看自己电脑上所安装的 npm 包管理工具的版本号：</p><p>安装：<code>npm install 模块名称</code> / 简写 <code>npm i 模块名称</code></p><p>安装指定版本的包：<code>npm i moment@2.22.2</code></p><p>卸载： <code>npm uninstall 模块名称</code></p><p>全局安装与本地安装</p><ul><li>命令行工具：全局安装 <code>npm install -g 模块名称</code></li><li>库文件：本地安装</li></ul><p>初次装包后多了哪些文件</p><p>node_modules 文件夹：用来存放所有已安装到项目中的包，require() 导入第三方包时，就是从这个目录中查找并加载包</p><p>package-lock.json 配置文件：用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等</p><p>package-lock.json 文件的作用</p><ul><li>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</li><li>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</li></ul><h4 id="package-json"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> package.json</h4><p>node_modules 文件夹的问题</p><ol><li>文件夹以及文件过多过碎，当我们将项目整体拷贝给别人的时候,，传输速度会很慢很慢.</li><li>复杂的模块依赖关系需要被记录，确保模块的版本和当前保持一致，否则会导致当前项目运行报错</li></ol><p>package.json 文件的作用</p><p>项目描述文件，记录了当前项目信息，例如项目名称、版本、作者、 github 地址、当前项目依赖了哪些第三方模块等</p><p>运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中</p><p>注意：今后在项目开发中，一定要把 node_modules 文件夹，添加到 .gitignore 忽略文件中</p><p>可以运行 <code>npm install</code> 命令（或 npm i）一次性安装所有的依赖包：</p><p>使用 <code>npm init -y</code> 命令生成</p><div class="language-jsx"><pre><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;01.helloworld.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>scripts 命令的别名</p><div class="language-jsx"><pre><code><span class="token string">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon app.js&quot;</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>执行命令：<code>npm run build</code></p><p>项目依赖</p><ul><li>在项目的开发阶段和线上运营阶段，都需要依赖的第三方包，称为项目依赖</li><li>使用 npm install 包名命令下载的文件会默认被添加到 package.json 文件的 dependencies 字段中</li></ul><div class="language-jsx"><pre><code><span class="token punctuation">{</span>\n\t\t<span class="token string">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token string">&quot;jquery&quot;</span><span class="token operator">:</span> &quot;<span class="token operator">^</span><span class="token number">3.3</span><span class="token number">.1</span>“\n\t\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>开发依赖</p><ul><li>在项目的开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖</li><li>使用 <code>npm install 包名 --save-dev</code> 命令将包添加到 package.json 文件的 devDependencies 字段中，简写 <code>npm i 包名 -D</code></li></ul><div class="language-jsx"><pre><code><span class="token punctuation">{</span>\n\t\t<span class="token string">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token string">&quot;gulp&quot;</span><span class="token operator">:</span> &quot;<span class="token operator">^</span><span class="token number">3.9</span><span class="token number">.1</span>“\n\t\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="nodemon"><a class="header-anchor" href="#nodemon" aria-hidden="true">#</a> nodemon</h4><p>是一个命令行工具，用以辅助项目开发</p><p>在 Node.js 中，每次修改文件都要在命令行工具中重新执行该文件，非常繁琐</p><p>nodemon 可以在文件修改后自动重新执行文件</p><p>使用步骤</p><ol><li>使用 <code>npm install nodemon –g</code> 下载它</li><li>在命令行工具中用 nodemon 命令替代 node 命令执行文件</li></ol><h4 id="cnpm"><a class="header-anchor" href="#cnpm" aria-hidden="true">#</a> cnpm</h4><p>淘宝镜像源，下载速度块</p><ol><li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li><li>在命令行工具中用 cnpm 命令替代 npm 命令执行文件</li></ol><h3 id="_3-模块加载机制"><a class="header-anchor" href="#_3-模块加载机制" aria-hidden="true">#</a> 3. 模块加载机制</h3><p>模块在第一次加载后会被缓存，这也意味着多次调用 require() 不会导致模块的代码被执行多次</p><p>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率</p><p>模块查找规则-当模块拥有路径但没有后缀时</p><div class="language-jsx"><pre><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./find.js&#39;</span><span class="token punctuation">)</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./find&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><ol><li>require 方法根据模块路径查找模块，如果是完整路径，直接引入模块</li><li>如果模块后缀省略，先找同名 JS 文件再找同名 JS 文件夹</li><li>如果找到了同名文件夹，找文件夹中的 index.js</li><li>如果文件夹中没有 index.js 就会去当前文件夹中的 package.json 文件中查找 main 选项中的入口文件</li><li>如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</li></ol><p>模块查找规则-当模块没有路径且没有后缀时</p><div class="language-jsx"><pre><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;find&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><ol><li>Node.js 会假设它是系统模块</li><li>Node.js 会去 node_modules 文件夹中</li><li>首先看是否有该名字的 JS 文件</li><li>再看是否有该名字的文件夹</li><li>如果是文件夹看里面是否有 index.js</li><li>如果没有 index.js 查看该文件夹中的 package.json 中的 main 选项确定模块入口文件</li><li>否则找不到报错</li></ol><h2 id="三、node-js-异步编程"><a class="header-anchor" href="#三、node-js-异步编程" aria-hidden="true">#</a> 三、Node.js 异步编程</h2><h3 id="_1-同步-api-异步-api"><a class="header-anchor" href="#_1-同步-api-异步-api" aria-hidden="true">#</a> 1. 同步 API 异步 API</h3><div class="language-jsx"><pre><code><span class="token comment">// 路径拼接，结果通过返回值拿到</span>\n<span class="token keyword">const</span> <span class="token keyword">public</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 请求地址解析，结果通过返回值拿到</span>\n<span class="token keyword">const</span> urlObj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>\n\n<span class="token comment">// 读取文件，结果通过函数的方式拿到</span>\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./demo.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>同步 API：只有当前 API 执行完成后，才能继续执行下一个 API</p><div class="language-jsx"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>异步 API：当前 API 的执行不会阻塞后续代码的执行</p><div class="language-jsx"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;last&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// before</span>\n<span class="token comment">// after</span>\n<span class="token comment">// last</span>\n</code></pre></div><p>区别：同步 API 可以从返回值中拿到执行的结果，但是异步 API 不可以</p><div class="language-jsx"><pre><code><span class="token comment">// 同步</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 30</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 异步</span>\n<span class="token keyword">function</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">&#39;Hello Node.js&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n</code></pre></div><p>异步 API 可以通过回调函数的方式拿到结果</p><div class="language-jsx"><pre><code><span class="token comment">// 异步 回调函数</span>\n<span class="token keyword">function</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      msg<span class="token operator">:</span> <span class="token string">&#39;Hello Node.js&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>异步 API 代码执行顺序：先同步再异步</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3rO1.png" alt="HO3rO1.png"></p><h3 id="_2-promise"><a class="header-anchor" href="#_2-promise" aria-hidden="true">#</a> 2. Promise</h3><p>问题：如果异步 API 后面的代码执行依赖当前异步 API 的执行结果，但实际上后续代码在执行时异步 API 还没有返回结果，这个问题要怎么解决呢？</p><p>回调地狱（回调嵌套回调嵌套回调）</p><div class="language-jsx"><pre><code><span class="token comment">// 需求：依次读取A文件，B文件，C文件</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>\n  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./b.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./c.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Promise 出现的目的是解决 Node.js 异步编程中回调地狱的问题</p><div class="language-jsx"><pre><code><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;失败了&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\npromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>上一个问题的解决方法</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./b.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./c.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="_3-异步函数-async"><a class="header-anchor" href="#_3-异步函数-async" aria-hidden="true">#</a> 3. 异步函数 async</h3><p>异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明了</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 1. 在普通函数定义的前面加上async关键字 普通函数就变成了异步函数</span>\n<span class="token comment">// 2. 异步函数默认的返回值是promise对象</span>\n<span class="token comment">// 3. 在异步函数内部使用throw关键字进行错误的抛出</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token string">&#39;发生了一些错误&#39;</span>\n  <span class="token keyword">return</span> <span class="token number">123</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;p1&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;p2&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;p3&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// await 关键字</span>\n  <span class="token comment">// 1. 它只能出现在异步函数中</span>\n  <span class="token comment">// 2. await promise 它可以暂停异步函数的执行 等待promise对象返回结果后再向下执行函数</span>\n  <span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> r3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>async</p><ul><li>普通函数定义前加 async 关键字 普通函数变成异步函数</li><li>异步函数默认返回 promise 对象</li><li>在异步函数内部使用 return 关键字进行结果返回 结果会被包裹在 promise 对象中 return 关键字代替了 resolve 方法</li><li>在异步函数内部使用 throw 关键字抛出程序异常</li><li>调用异步函数再链式调用 then 方法获取异步函数执行结果</li><li>调用异步函数再链式调用 catch 方法获取异步函数执行错误信息</li></ul><p>await</p><ul><li><p>await 关键字只能出现在异步函数中</p></li><li><p>await promise await 后面只能写 promise 对象 写其他类型的 API 是不可以的</p><p>promisify 方法可以把现有的异步 API 包装成返回 promise 对象的异步 API</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> promisify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promisify\n<span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./b.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> r3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./c.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>await 关键字可以暂停异步函数向下执行 直到 promise 返回结果</p></li></ul><h3 id="_4-try-catch"><a class="header-anchor" href="#_4-try-catch" aria-hidden="true">#</a> 4. try catch</h3><p>try catch 可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但是不能捕获其他类型 API 发生的错误</p><div class="language-jsx"><pre><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="四、express"><a class="header-anchor" href="#四、express" aria-hidden="true">#</a> 四、Express</h2><p>官方给出的概念：Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架</p><p>通俗的理解：Express 的作用和 Node.js 内置的 http 模块类似，是专门用来创建 Web 服务器的</p><p>Express 的本质：就是一个 npm 上的第三方包，提供了快速创建 Web 服务器的便捷方法</p><p>Express 的中文官网：<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener noreferrer">http://www.expressjs.com.cn/</a></p><h3 id="_1-express-的基本使用"><a class="header-anchor" href="#_1-express-的基本使用" aria-hidden="true">#</a> 1. Express 的基本使用</h3><p><code>npm i express</code></p><p>创建基本的服务器</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 导入 express</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 创建 web 服务器</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 调用 express 提供的 res.send() 方法，向客户端响应一个 JSON 对象</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">&#39;男&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 调用 express 提供的 res.send() 方法，向客户端响应一个 文本字符串</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;请求成功&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 通过 req.query 可以获取到客户端发送过来的 查询参数</span>\n  <span class="token comment">// 注意：默认情况下，req.query 是一个空对象</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 注意：这里的 :id 是一个动态的参数</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/:id/:username&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// req.params 是动态匹配到的 URL 参数，默认也是一个空对象</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3. 启动 web 服务器</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;express server running at http://127.0.0.1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>托管静态资源</p><p>express 提供了一个非常好用的函数，叫做 <code>express.static()</code>，通过它，我们可以非常方便地创建一个静态资源服务器，例如，通过如下代码就可以将 public 目录下的图片、 CSS 文件、 JavaScript 文件对外开放访问了：</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 在这里，调用 express.static() 方法，快速的对外提供静态资源</span>\n<span class="token comment">// 如果希望在托管的静态资源访问路径之前， 挂载路径前缀，则可以使用如下的方式：</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/files&#39;</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;./files&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /files/images/kitten.jpg</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;./clock&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /js/app.js</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;express server running at http://127.0.0.1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>注意： Express 在指定的静态目录中查找文件，并对外提供资源的访问路径，因此，存放静态文件的目录名不会出现在 URL 中</p><h3 id="_2-express-路由"><a class="header-anchor" href="#_2-express-路由" aria-hidden="true">#</a> 2. Express 路由</h3><p>在 Express 中，路由指的是客户端的请求与服务器处理函数之间的映射关系</p><p>Express 中的路由分 3 部分组成，分别是请求的类型、请求的 URL 地址、处理函数，格式如下：</p><div class="language-jsx"><pre><code><span class="token comment">// 挂载路由</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello world.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Post Request.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>路由匹配过程：</p><p>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数</p><p>在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的 URL 同时匹配成功，则 Express 会将这次请求，转交给对应的 function 函数进行处理</p><p>路由匹配的注意点：</p><ol><li>按照定义的先后顺序进行匹配</li><li>请求类型和请求的 URL 同时匹配成功，才会调用对应的处理函数</li></ol><p><strong>模块化路由</strong></p><p>为了方便对路由进行模块化的管理， Express 不建议将路由直接挂载到 app 上，而是推荐将路由抽离为单独的模块</p><p>将路由抽离为单独模块的步骤如下：</p><ol><li><p>创建路由模块对应的 .js 文件</p></li><li><p>调用 express.Router() 函数创建路由对象</p></li><li><p>向路由对象上挂载具体的路由</p></li><li><p>使用 module.exports 向外共享路由对象</p><div class="language-jsx"><pre><code><span class="token comment">// 这是路由模块</span>\n<span class="token comment">// 1. 导入 express</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 创建路由对象</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3. 挂载具体的路由</span>\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Get user list.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nrouter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user/add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Add new user.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 向外导出路由对象</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> router\n</code></pre></div></li><li><p>使用 app.use() 函数注册路由模块</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 导入路由模块</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./03.router&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 注册路由模块</span>\n<span class="token comment">// 为路由模块添加前缀</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>\n\n<span class="token comment">// 注意： app.use() 函数的作用，就是来注册全局中间件</span>\n</code></pre></div></li></ol><h3 id="_3-express-中间件"><a class="header-anchor" href="#_3-express-中间件" aria-hidden="true">#</a> 3. Express 中间件</h3><p>中间件（Middleware），特指业务流程的中间处理环节</p><p>当一个请求到达 Express 的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3dW4.png" alt="HO3dW4.png"></p><p><strong>Express 中间件的格式</strong></p><p>本质上就是一个 function 处理函数， Express 中间件的格式如下：</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3DyR.png" alt="HO3DyR.png"></p><p>注意：中间件函数的形参列表中，必须包含 next 参数，而路由处理函数中只包含 req 和 res</p><p>next 函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由</p><p>定义中间件函数</p><div class="language-jsx"><pre><code><span class="token comment">// 定义一个最简单的中间件函数</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是最简单的中间件函数&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 把流转关系，转交给下一个中间件或路由</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 将 mw 注册为全局生效的中间件</span>\n<span class="token comment">// 客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mw<span class="token punctuation">)</span>\n\n<span class="token comment">// 这是定义全局中间件的简化形式</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是最简单的中间件函数&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>中间件的作用</p><p>多个中间件之间，共享同一份 req 和 res，基于这样的特性，我们可以在上游的中间件中， 统一为 req 或 res 对象添加自定义的属性或方法，供下游的中间件或路由进行使用</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3UFU.png" alt="HO3UFU.png"></p><p>可以使用 <code>app.use()</code> 连续定义多个全局中间件，客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用</p><p>不使用 app.use() 定义的中间件，叫做局部生效的中间件</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 定义中间件函数</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mw1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;调用了局部生效的中间件&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 2. 创建路由</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Home page.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>同时使用多个局部中间件</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 定义中间件函数</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mw1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;调用了第一个局部生效的中间件&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mw2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;调用了第二个局部生效的中间件&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 2. 创建路由</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>mw1<span class="token punctuation">,</span> mw2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 不加中括号也可以</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Home page.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;User page.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>注意事项</p><ol><li>一定要在路由之前注册中间件</li><li>客户端发送过来的请求， 可以连续调用多个中间件进行处理</li><li>执行完中间件的业务代码之后， 不要忘记调用 next() 函数</li><li>为了防止代码逻辑混乱，调用 next() 函数后不要再写额外的代码</li><li>连续调用多个中间件时，多个中间件之间， 共享 req 和 res 对象</li></ol><h4 id="中间件分类"><a class="header-anchor" href="#中间件分类" aria-hidden="true">#</a> 中间件分类</h4><p>应用级别的中间件</p><p>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ， 绑定到 app 实例上的中间件，叫做应用级别的中间件</p><p>路由级别的中间件</p><p>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件，它的用法和应用级别中间件没有任何区别，只不过， 应用级别中间件是绑定到 app 实例上， 路由级别中间件绑定到 router 实例上</p><p>错误级别的中间件</p><p>专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</p><p>格式：错误级别中间件的 function 处理函数中， 必须有 4 个形参，形参顺序从前到后，分别是 (err, req, res, next)</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 定义路由</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 1.1 人为的制造错误</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;服务器内部发生了错误！&#39;</span><span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Home page.&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2. 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发生了错误！&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Error：&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>注意： 错误级别的中间件，必须注册在所有路由之后！</p><p>Express 内置的中间件</p><ol><li>express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、 CSS 样式等（无兼容性）</li><li>express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li><li>express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li></ol><div class="language-jsx"><pre><code><span class="token comment">// 注意：除了错误级别的中间件，其他的中间件，必须在路由之前进行配置</span>\n<span class="token comment">// 通过 express.json() 这个中间件，解析表单中的 JSON 格式的数据</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 通过 express.urlencoded() 这个中间件，来解析 表单中的 url-encoded 格式的数据</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 在服务器，可以使用 req.body 这个属性，来接收客户端发送过来的请求体数据</span>\n  <span class="token comment">// 默认情况下，如果不配置解析表单数据的中间件，则 req.body 默认等于 undefined</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/book&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 在服务器端，可以通过 req,body 来获取 JSON 格式的表单数据和 url-encoded 格式的数据</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>第三方的中间件</p><p>非 Express 官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件，在项目中，大家可以按需下载并配置第三方中间件，从而提高项目的开发效率</p><p>例如：在 express@4.16.0 之前的版本中，经常使用 body-parser 这个第三方中间件，来解析请求体数据</p><p>注意： Express 内置的 express.urlencoded 中间件，就是基于 body-parser 这个第三方中间件进一步封装出来的</p><p>自定义中间件</p><div class="language-jsx"><pre><code><span class="token comment">// 导入 Node.js 内置的 querystring 模块</span>\n<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 这是解析表单数据的中间件</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 定义中间件具体的业务逻辑</span>\n  <span class="token comment">// 1. 定义一个 str 字符串，专门用来存储客户端发送过来的请求体数据</span>\n  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n  <span class="token comment">// 2. 监听 req 的 data 事件（数据较大时会分批发送，触发多次事件）</span>\n  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    str <span class="token operator">+=</span> chunk\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// 3. 监听 req 的 end 事件</span>\n  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在 str 中存放的是完整的请求体数据</span>\n    <span class="token comment">// console.log(str)</span>\n    <span class="token comment">// TODO: 把字符串格式的请求体数据，解析成对象格式</span>\n    <span class="token keyword">const</span> body <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    req<span class="token punctuation">.</span>body <span class="token operator">=</span> body\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="_4-跨域问题"><a class="header-anchor" href="#_4-跨域问题" aria-hidden="true">#</a> 4. 跨域问题</h3><p>解决接口跨域问题的方案主要有两种：</p><ol><li>CORS（主流的解决方案， 推荐使用）</li><li>JSONP（有缺陷的解决方案：只支持 GET 请求）</li></ol><h4 id="cors"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h4><p>cors 是 Express 的一个第三方中间件，通过安装和配置 cors 中间件，可以很方便地解决跨域问题</p><p>使用步骤分为如下 3 步：</p><ol><li>运行 <code>npm install cors</code> 安装中间件</li><li>使用 <code>const cors = require(&#39;cors&#39;)</code> 导入中间件</li><li>在路由之前调用 <code>app.use(cors())</code> 配置中间件</li></ol><p>什么是 CORS</p><p>CORS （Cross-Origin Resource Sharing，跨域资源共享）由一系列 HTTP 响应头组成， 这些 HTTP 响应头决定</p><p>浏览器是否阻止前端 JS 代码跨域获取资源</p><p>浏览器的同源安全策略默认会阻止网页“跨域”获取资源，但如果接口服务器配置了 CORS 相关的 HTTP 响应头，</p><p>就可以解除浏览器端的跨域访问限制</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3toT.png" alt="HO3toT.png"></p><p><img src="https://s4.ax1x.com/2022/02/20/HO3aYF.png" alt="HO3aYF.png"></p><p>注意事项：</p><ol><li>CORS 主要在服务器端进行配置，客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口</li><li>CORS 在浏览器中有兼容性，只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如： IE10+、 Chrome4+、 FireFox3.5+）。</li></ol><p>CORS 响应头部 - Access-Control-Allow-Origin</p><p><img src="https://s4.ax1x.com/2022/02/20/HO30SJ.png" alt="HO30SJ.png"></p><p><img src="https://s4.ax1x.com/2022/02/20/HO3Bl9.png" alt="HO3Bl9.png"></p><p>其中， origin 参数的值指定了允许访问该资源的外域 URL</p><p>如果指定了值为通配符 *，表示允许来自任何域的请求</p><p>CORS 响应头部 - Access-Control-Allow-Headers</p><p>默认情况下， CORS 仅支持客户端向服务器发送如下的 9 个请求头：Accept、 Accept-Language、 Content-Language、 DPR、 Downlink、 Save-Data、 Viewport-Width、 Width 、Content-Type （值仅限于 text/plain、 multipart/form-data、 application/x-www-form-urlencoded 三者之一）</p><p>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 Access-Control-Allow-Headers 对额外</p><p>的请求头进行声明，否则这次请求会失败！</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3yex.png" alt="HO3yex.png"></p><p>CORS 响应头部 - Access-Control-Allow-Methods</p><p>默认情况下， CORS 仅支持客户端发起 GET、 POST、 HEAD 请求</p><p>如果客户端希望通过 PUT、 DELETE 等方式请求服务器的资源，则需要在服务器端，通过 Access-Control-Alow-Methods 来指明实际请求所允许使用的 HTTP 方法</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3cTK.png" alt="HO3cTK.png"></p><p>CORS 请求的分类</p><p>客户端在请求 CORS 接口时，根据请求方式和请求头的不同，可以将 CORS 的请求分为两大类，分别是：</p><p>① 简单请求</p><p>同时满足以下两大条件的请求，就属于简单请求：</p><ul><li>请求方式： GET、 POST、 HEAD 三者之一</li><li>HTTP 头部信息不超过以下几种字段： 无自定义头部字段、 Accept、 Accept-Language、 Content-Language、 DPR、Downlink、 Save-Data、 Viewport-Width、 Width 、 Content-Type（只有三个值 application/x-www-formurlencoded、 multipart/form-data、 text/plain）</li></ul><p>② 预检请求</p><p>只要符合以下任何一个条件的请求，都需要进行预检请求：</p><ul><li>请求方式为 GET、 POST、 HEAD 之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 application/json 格式的数据</li></ul><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”，服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p><h4 id="jsonp"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h4><p>概念：浏览器端通过 <code>&lt;script&gt;</code> 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用，这种请求数据的方式叫做 JSONP</p><p>特点：</p><ol><li>JSONP 不属于真正的 Ajax 请求，因为它没有使用 XMLHttpRequest 这个对象</li><li>JSONP 仅支持 GET 请求，不支持 POST、 PUT、 DELETE 等请求</li></ol><h3 id="_5-使用-express-写接口"><a class="header-anchor" href="#_5-使用-express-写接口" aria-hidden="true">#</a> 5. 使用 Express 写接口</h3><div class="language-jsx"><pre><code><span class="token comment">// 导入 express</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 创建服务器实例</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 配置解析表单数据的中间件</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 必须在配置 cors 中间件之前，配置 JSONP 的接口</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/jsonp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// TODO: 定义 JSONP 接口具体的实现过程</span>\n  <span class="token comment">// 1. 得到函数的名称</span>\n  <span class="token keyword">const</span> funcName <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback\n  <span class="token comment">// 2. 定义要发送到客户端的数据对象</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span>\n  <span class="token comment">// 3. 拼接出一个函数的调用</span>\n  <span class="token keyword">const</span> scriptStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>funcName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n  <span class="token comment">// 4. 把拼接的字符串，响应给客户端</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>scriptStr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 一定要在路由之前，配置 cors 这个中间件，从而解决接口跨域的问题</span>\n<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 导入路由模块</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./16.apiRouter&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 把路由模块，注册到 app 上</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>\n\n<span class="token comment">// 启动服务器</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;express server running at http://127.0.0.1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>路由模块</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 在这里挂载对应的路由</span>\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 通过 req.query 获取客户端通过查询字符串，发送到服务器的数据</span>\n  <span class="token keyword">const</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query\n  <span class="token comment">// 调用 res.send() 方法，向客户端响应处理的结果</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    status<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 0 表示处理成功，1 表示处理失败</span>\n    msg<span class="token operator">:</span> <span class="token string">&#39;GET 请求成功！&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 状态的描述</span>\n    data<span class="token operator">:</span> query <span class="token comment">// 需要响应给客户端的数据</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 定义 POST 接口</span>\nrouter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/post&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 通过 req.body 获取请求体中包含的 url-encoded 格式的数据</span>\n  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body\n  <span class="token comment">// 调用 res.send() 方法，向客户端响应结果</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    status<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    msg<span class="token operator">:</span> <span class="token string">&#39;POST 请求成功！&#39;</span><span class="token punctuation">,</span>\n    data<span class="token operator">:</span> body\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 定义 DELETE 接口</span>\nrouter<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;/delete&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    status<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    msg<span class="token operator">:</span> <span class="token string">&#39;DELETE请求成功&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> router\n</code></pre></div><h2 id="五、数据库"><a class="header-anchor" href="#五、数据库" aria-hidden="true">#</a> 五、数据库</h2><p>为什么要使用数据库</p><ul><li>动态网站中的数据都是存储在数据库中的</li><li>数据库可以用来持久存储客户端通过表单收集的用户信息</li><li>数据库软件本身可以对数据进行高效的管理</li></ul><p>数据库即存储数据的仓库，可以将数据进行有序的分门别类的存储，它是独立于语言之外的软件，可以通过</p><p>API 去操作它，常见的数据库软件有：mysql、mongoDB、oracle</p><h3 id="_1-mongodb"><a class="header-anchor" href="#_1-mongodb" aria-hidden="true">#</a> 1. mongoDB</h3><p>下载：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/download-center/community</a></p><p>MongoDB 可视化操作软件（Compass），是使用图形界面操作数据库的一种方式</p><p><img src="https://s4.ax1x.com/2022/02/20/HO32FO.png" alt="HO32FO.png"></p><p><strong>数据库相关概念</strong></p><p>在一个数据库软件中可以包含多个数据仓库，在每个数据仓库中可以包含多个数据集合，每个数据集合中可以包含多条文档（具体的数据）</p><p><img src="https://s4.ax1x.com/2022/02/20/HO3hSH.png" alt="HO3hSH.png"></p><p>启动 mongoDB 服务（管理员身份）</p><p>在命令行工具中运行 <code>net start mongoDB</code> 即可启动 MongoDB（默认启动），否则 MongoDB 将无法连接</p><h4 id="mongoose"><a class="header-anchor" href="#mongoose" aria-hidden="true">#</a> mongoose</h4><p>使用 Node.js 操作 MongoDB 数据库需要依赖 Node.js 第三方包 mongoose</p><h4 id="数据库连接"><a class="header-anchor" href="#数据库连接" aria-hidden="true">#</a> <strong>数据库连接</strong></h4><p>使用 mongoose 提供的 connect 方法即可连接数据库</p><div class="language-jsx"><pre><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// playground 是数据库名称，如果没有的话在后续操作中会自动创建</span>\nmongoose\n  <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost/playground&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库连接成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库连接失败&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 如果提示{ useNewUrlParser: true }</span>\n<span class="token comment">// mongoose.connect(&#39;mongodb://localhost/playground&#39;, { useNewUrlParser: true })</span>\n<span class="token comment">//     .then(() =&gt; console.log(&#39;数据库连接成功&#39;))</span>\n<span class="token comment">//     .catch(err =&gt; console.log(&#39;数据库连接失败&#39;, err));</span>\n</code></pre></div><h4 id="创建数据库"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> <strong>创建数据库</strong></h4><p>在 MongoDB 中不需要显式创建数据库，如果正在使用的数据库不存在， MongoDB 会自动创建</p><h4 id="创建集合"><a class="header-anchor" href="#创建集合" aria-hidden="true">#</a> <strong>创建集合</strong></h4><p>创建集合分为两步，一是对集合设定规则，二是创建集合，创建 mongoose.Schema 构造函数的实例即可创建集合</p><div class="language-jsx"><pre><code><span class="token comment">// 设定集合规则</span>\n<span class="token keyword">const</span> courseSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  author<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  isPublished<span class="token operator">:</span> Boolean\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 创建集合并应用规则（首字母大写），但实际创建的是小写并加上一个s</span>\n<span class="token keyword">const</span> Course <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Course&#39;</span><span class="token punctuation">,</span> courseSchema<span class="token punctuation">)</span> <span class="token comment">// courses</span>\n</code></pre></div><h4 id="创建文档"><a class="header-anchor" href="#创建文档" aria-hidden="true">#</a> <strong>创建文档</strong></h4><p>创建文档实际上就是向集合中插入数据</p><p>分为两步：</p><ol><li>创建集合实例</li><li>调用实例对象下的 save 方法将数据保存到数据库中</li></ol><p>方法一</p><div class="language-jsx"><pre><code><span class="token comment">// 创建集合实例</span>\n<span class="token keyword">const</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Node.js course&#39;</span><span class="token punctuation">,</span>\n  author<span class="token operator">:</span> <span class="token string">&#39;黑马讲师&#39;</span><span class="token punctuation">,</span>\n  tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;backend&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  isPublished<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 将数据保存到数据库中</span>\ncourse<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>方法二</p><div class="language-jsx"><pre><code><span class="token comment">// 回调函数方式</span>\nCourse<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;JavaScript基础&#39;</span><span class="token punctuation">,</span> author<span class="token operator">:</span> <span class="token string">&#39;黑马讲师&#39;</span><span class="token punctuation">,</span> isPublish<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> doc</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 错误对象</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  <span class="token comment">// 当前插入的文档</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// Promise方式</span>\nCourse<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;JavaScript基础&#39;</span><span class="token punctuation">,</span> author<span class="token operator">:</span> <span class="token string">&#39;黑马讲师&#39;</span><span class="token punctuation">,</span> isPublish<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="mongodb-数据库导入数据"><a class="header-anchor" href="#mongodb-数据库导入数据" aria-hidden="true">#</a> <strong>mongoDB 数据库导入数据</strong></h4><p><code>mongoimport –d 数据库名称 –c 集合名称 –file 要导入的数据文件</code></p><p>找到 mongodb 数据库的安装目录，将安装目录下的 bin 目录放置在环境变量中</p><h4 id="查询文档"><a class="header-anchor" href="#查询文档" aria-hidden="true">#</a> <strong>查询文档</strong></h4><div class="language-jsx"><pre><code><span class="token comment">// 根据条件查找文档（条件为空则查找所有文档）</span>\nCourse<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 返回文档集合 不管几条返回的都是数组</span>\n<span class="token punctuation">[</span><span class="token punctuation">{</span>\n\t_id<span class="token operator">:</span> <span class="token number">5</span>c0917ed37ec9b03c07cf95f<span class="token punctuation">,</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;node.js基础&#39;</span><span class="token punctuation">,</span>\n\tauthor<span class="token operator">:</span> &#39;黑马讲师‘\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n\t_id<span class="token operator">:</span> <span class="token number">5</span>c09dea28acfb814980ff827<span class="token punctuation">,</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;Javascript&#39;</span><span class="token punctuation">,</span>\n\tauthor<span class="token operator">:</span> &#39;黑马讲师‘\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 根据条件查找文档 默认返回第一条文档</span>\nCourse<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;node.js基础&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 返回文档</span>\n<span class="token punctuation">{</span>\n_id<span class="token operator">:</span> <span class="token number">5</span>c0917ed37ec9b03c07cf95f<span class="token punctuation">,</span>\nname<span class="token operator">:</span> <span class="token string">&#39;node.js基础&#39;</span><span class="token punctuation">,</span>\nauthor<span class="token operator">:</span> &#39;黑马讲师‘\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 匹配大于 小于</span>\nUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> $gt<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> $lt<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 匹配包含</span>\nUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hobbies<span class="token operator">:</span> <span class="token punctuation">{</span> $<span class="token keyword">in</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;敲代码&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 选择要查询的字段 -表示不想查询的字段</span>\nUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;name email -_id&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 将数据按照年龄进行排序（升序）</span>\nUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 将数据按照年龄进行排序（降序）</span>\nUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">&#39;-age&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// skip 跳过前多少条数据</span>\n<span class="token comment">// limit 限制查询数量</span>\n<span class="token comment">// 在分页的时候用到</span>\nUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="删除文档"><a class="header-anchor" href="#删除文档" aria-hidden="true">#</a> <strong>删除文档</strong></h4><div class="language-jsx"><pre><code><span class="token comment">// 删除单个</span>\n<span class="token comment">// 如何查询条件匹配了多个文档 那么将会删除第一个匹配的文档</span>\nCourse<span class="token punctuation">.</span><span class="token function">findOneAndDelete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 查询条件 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// User.findOneAndDelete({_id: &#39;5c09f267aeb04b22f8460968&#39;}).then(result =&gt; console.log(result))</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 删除多个</span>\nUser<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 查询条件 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="更新文档"><a class="header-anchor" href="#更新文档" aria-hidden="true">#</a> <strong>更新文档</strong></h4><div class="language-jsx"><pre><code><span class="token comment">// 更新单个</span>\n<span class="token comment">// 如果匹配了多条文档, 只会修改匹配成功的第一条文档</span>\nUser<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 查询条件 <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 要修改的值 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// User.updateOne({name: &#39;李四&#39;}, {age: 120, name: &#39;李狗蛋&#39;}).then(result =&gt; console.log(result))</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 更新多个</span>\nUser<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 查询条件 <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 要更改的值 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="mongoose-验证"><a class="header-anchor" href="#mongoose-验证" aria-hidden="true">#</a> <strong>mongoose 验证</strong></h4><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败就则输入插入失败</p><ul><li>required: true 必传字段</li><li>minlength： 3 字符串最小长度</li><li>maxlength: 20 字符串最大长度</li><li>min: 2 数值最小为 2</li><li>max: 100 数值最大为 100</li><li>enum: [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;, &#39;node.js&#39;]</li><li>trim: true 去除字符串两边的空格</li><li>validate: 自定义验证器</li><li>default: 默认值</li></ul><div class="language-jsx"><pre><code><span class="token keyword">const</span> postSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token comment">// 必选字段 传入数组可以自定义错误信息</span>\n    required<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;请传入文章标题&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// 字符串的最小长度</span>\n    minlength<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;文章长度不能小于2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// 字符串的最大长度</span>\n    maxlength<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;文章长度最大不能超过5&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// 去除字符串两边的空格</span>\n    trim<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n    <span class="token comment">// 数字的最小范围</span>\n    min<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n    <span class="token comment">// 数字的最大范围</span>\n    max<span class="token operator">:</span> <span class="token number">100</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  publishDate<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> Date<span class="token punctuation">,</span>\n    <span class="token comment">// 默认值</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  category<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token comment">// 枚举 列举出当前字段可以拥有的值</span>\n    <span class="token keyword">enum</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;node.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      message<span class="token operator">:</span> <span class="token string">&#39;分类名称要在一定的范围内才可以&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  author<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    validate<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 返回布尔值</span>\n        <span class="token comment">// true 验证成功</span>\n        <span class="token comment">// false 验证失败</span>\n        <span class="token comment">// v 要验证的值</span>\n        <span class="token keyword">return</span> v <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">4</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// 自定义错误信息</span>\n      message<span class="token operator">:</span> <span class="token string">&#39;传入的值不符合验证规则&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> Post <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Post&#39;</span><span class="token punctuation">,</span> postSchema<span class="token punctuation">)</span>\n\nPost<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;aa&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span> category<span class="token operator">:</span> <span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> author<span class="token operator">:</span> <span class="token string">&#39;bd&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取错误信息对象</span>\n    <span class="token keyword">const</span> err <span class="token operator">=</span> error<span class="token punctuation">.</span>errors\n    <span class="token comment">// 循环错误信息对象</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 将错误信息打印到控制台中</span>\n      <span class="token comment">// 获取错误信息： error.errors[&#39;字段名称&#39;].message</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="集合关联"><a class="header-anchor" href="#集合关联" aria-hidden="true">#</a> 集合关联</h4><p>通常不同集合的数据之间是有关系的，例如文章信息和用户信息存储在不同集合中，但文章是某个用户发表的，要查询文章的所有信息包括发表用户，就需要用到集合关联</p><ul><li>使用 id 对集合进行关联</li><li>使用 populate 方法进行关联集合查询</li></ul><p><img src="https://s4.ax1x.com/2022/02/20/HO3RYD.png" alt="HO3RYD.png"></p><div class="language-jsx"><pre><code><span class="token comment">// 用户集合规则</span>\n<span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    required<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 文章集合规则</span>\n<span class="token keyword">const</span> postSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> String\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  author<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>\n    ref<span class="token operator">:</span> <span class="token string">&#39;User&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 用户集合</span>\n<span class="token keyword">const</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span>\n<span class="token comment">// 文章集合</span>\n<span class="token keyword">const</span> Post <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Post&#39;</span><span class="token punctuation">,</span> postSchema<span class="token punctuation">)</span>\n\n<span class="token comment">// 创建用户</span>\n<span class="token comment">// User.create({name: &#39;itheima&#39;}).then(result =&gt; console.log(result));</span>\n<span class="token comment">// 创建文章</span>\n<span class="token comment">// Post.create({titile: &#39;123&#39;, author: &#39;5c0caae2c4e4081c28439791&#39;}).then(result =&gt; console.log(result));</span>\nPost<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">&#39;author&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 直接查询显示的author是一串id</span>\n</code></pre></div>',329);t.render=function(a,p,t,e,c,u){return s(),n("div",null,[o])};export default t;export{p as __pageData};
