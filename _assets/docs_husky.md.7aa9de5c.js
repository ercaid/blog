import{g as e,f as n,G as t}from"./common-bec3f312.js";const o='{"title":"前端代码规范化 | husky","frontmatter":{"date":"2022-02-24","title":"前端代码规范化 | husky","tags":["前端规范化","husky"],"describe":"husky 是一个 Git Hook 工具，实现代码开发规范化。"},"headers":[{"level":2,"title":"git 提交规范","slug":"git-提交规范"},{"level":2,"title":"代码格式提交规范","slug":"代码格式提交规范"}],"relativePath":"docs/husky.md","lastUpdated":1646384305246.1646}';var i={};const l=t('<p>husky 是一个 Git Hook 工具。（在特定的重要动作发生时触发的自定义脚本）</p><p>实现代码开发规范化。</p><h2 id="git-提交规范"><a class="header-anchor" href="#git-提交规范" aria-hidden="true">#</a> git 提交规范</h2><ol><li><p>安装 commitizen 和 cz-customizable</p><p><code>npm install -g commitizen@4.2.4</code></p><p><code>npm i cz-customizable@6.3.0 --save-dev</code></p></li><li><p>在 package.json 中进行新增</p><div class="language-"><pre><code>&quot;config&quot;: {\n  &quot;commitizen&quot;: {\n    &quot;path&quot;: &quot;node_modules/cz-customizable&quot;\n  }\n}\n</code></pre></div></li><li><p>在根目录下新建 .cz-config.js 文件并写入配置 之后就可以用 git cz 来代替 git commit</p><div class="language-"><pre><code>module.exports = {\n  // 可选类型\n  types: [\n    { value: &#39;feat&#39;, name: &#39;feat:     新功能&#39; },\n    { value: &#39;fix&#39;, name: &#39;fix:      修复&#39; },\n    { value: &#39;docs&#39;, name: &#39;docs:     文档变更&#39; },\n    { value: &#39;style&#39;, name: &#39;style:    代码格式(不影响代码运行的变动)&#39; },\n    {\n      value: &#39;refactor&#39;,\n      name: &#39;refactor: 重构(既不是增加feature，也不是修复bug)&#39;\n    },\n    { value: &#39;perf&#39;, name: &#39;perf:     性能优化&#39; },\n    { value: &#39;test&#39;, name: &#39;test:     增加测试&#39; },\n    { value: &#39;chore&#39;, name: &#39;chore:    构建过程或辅助工具的变动&#39; },\n    { value: &#39;revert&#39;, name: &#39;revert:   回退&#39; },\n    { value: &#39;build&#39;, name: &#39;build:    打包&#39; }\n  ],\n  // 消息步骤\n  messages: {\n    type: &#39;请选择提交类型:&#39;,\n    customScope: &#39;请输入修改范围(可选):&#39;,\n    subject: &#39;请简要描述提交(必填):&#39;,\n    body: &#39;请输入详细描述(可选):&#39;,\n    footer: &#39;请输入要关闭的issue(可选):&#39;,\n    confirmCommit: &#39;确认使用以上信息提交？(y/n/e/h)&#39;\n  },\n  // 跳过问题\n  skipQuestions: [&#39;body&#39;, &#39;footer&#39;],\n  // subject文字长度默认是72\n  subjectLimit: 72\n}\n</code></pre></div></li><li><p>使用 husky 进行强制 git 代码提交规范</p><p><code>npm install --save-dev @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4</code></p><p><code>npm install husky@7.0.1 --save-dev</code></p><p><code>npx husky install</code></p></li><li><p>在根目录下导入配置文件（commitlint.config.js）</p><div class="language-"><pre><code>module.exports = {\n  // 继承的规则\n  extends: [&#39;@commitlint/config-conventional&#39;],\n  // 定义规则类型\n  rules: {\n    // type 类型定义，表示 git 提交的 type 必须在以下类型范围内\n    &#39;type-enum&#39;: [\n      2,\n      &#39;always&#39;,\n      [\n        &#39;feat&#39;, // 新功能 feature\n        &#39;fix&#39;, // 修复 bug\n        &#39;docs&#39;, // 文档注释\n        &#39;style&#39;, // 代码格式(不影响代码运行的变动)\n        &#39;refactor&#39;, // 重构(既不增加新功能，也不是修复bug)\n        &#39;perf&#39;, // 性能优化\n        &#39;test&#39;, // 增加测试\n        &#39;chore&#39;, // 构建过程或辅助工具的变动\n        &#39;revert&#39;, // 回退\n        &#39;build&#39; // 打包\n      ]\n    ],\n    // subject 大小写不做校验\n    &#39;subject-case&#39;: [0]\n  }\n}\n</code></pre></div></li><li><p>在 package.json 中新增指令</p><div class="language-"><pre><code>&quot;scripts&quot;: {\n    &quot;prepare&quot;: &quot;husky install&quot;\n},\n</code></pre></div></li><li><p>并执行 <code>npm run prepare</code></p></li><li><p>新增 husky 配置文件 <code>npx husky add .husky/commit-msg</code></p><p>并往里面写入（覆盖 undefined）</p><p><code>npx --no-install commitlint --edit</code></p></li><li><p>此时可以进行测试，不符合规范的 commit 将被拦截</p></li></ol><h2 id="代码格式提交规范"><a class="header-anchor" href="#代码格式提交规范" aria-hidden="true">#</a> 代码格式提交规范</h2><ol><li><p>在 VSCode 插件中安装 prettier</p></li><li><p>在根目录下导入配置文件（.prettierrc）</p><div class="language-"><pre><code>{\n  &quot;semi&quot;: false,\n  &quot;singleQuote&quot;: true,\n  &quot;trailingComma&quot;: &quot;none&quot;\n}\n</code></pre></div></li><li><p>在 VSCode 的设置里 搜索 save 就能看到并勾上 format on save（保存时自动格式化）</p></li><li><p>右键 使用 ... 格式化文档 配置默认格式化文档程序 选择 prettier</p></li><li><p>在配置下 .eslintrc.js 里的 rules 新增 为了解决 eslint 与 prettier 冲突</p><div class="language-"><pre><code>&#39;indent&#39;: 0,\n&#39;space-before-function-paren&#39;: 0\n</code></pre></div></li><li><p>使用 husky 强制代码格式化 创建配置文件 <code>npx husky add .husky/pre-commit</code></p></li><li><p>往第六步生成的文件中写入 <code>npx lint-staged</code></p></li><li><p>把 package.json 文件的 lint-staged 修改为</p><div class="language-"><pre><code>&quot;lint-staged&quot;: {\n   &quot;src/**/*.{js,vue}&quot;: [      // src目录下所有的js和vue文件\n     &quot;eslint --fix&quot;,           // 自动修复\n     &quot;git add&quot;                 // 自动提交时修复\n   ]\n }\n</code></pre></div></li></ol>',6);i.render=function(t,o,i,a,s,c){return n(),e("div",null,[l])};export default i;export{o as __pageData};
