import{g as s,f as a,G as n}from"./common-bec3f312.js";const t='{"title":"前端笔记 | 移动端","frontmatter":{"date":"2022-01-28","title":"前端笔记 | 移动端","tags":["前端笔记","移动端"],"describe":"移动端 学习笔记"},"headers":[{"level":2,"title":"一、移动端基础","slug":"一、移动端基础"},{"level":2,"title":"二、视口","slug":"二、视口"},{"level":3,"title":"1. 布局视口 layout viewport","slug":"_1-布局视口-layout-viewport"},{"level":3,"title":"2. 视觉视口 visual viewport","slug":"_2-视觉视口-visual-viewport"},{"level":3,"title":"3. 理想视口 ideal viewport","slug":"_3-理想视口-ideal-viewport"},{"level":3,"title":"4. meta 视口标签","slug":"_4-meta-视口标签"},{"level":2,"title":"三、二倍图","slug":"三、二倍图"},{"level":3,"title":"1. 物理像素 & 物理像素比","slug":"_1-物理像素-物理像素比"},{"level":3,"title":"2. 背景缩放 background-size","slug":"_2-背景缩放-background-size"},{"level":2,"title":"四、移动端开发选择","slug":"四、移动端开发选择"},{"level":2,"title":"五、移动端技术解决方案","slug":"五、移动端技术解决方案"},{"level":2,"title":"六、移动端常见布局","slug":"六、移动端常见布局"},{"level":2,"title":"七、flex 布局","slug":"七、flex-布局"},{"level":3,"title":"1. flex 原理","slug":"_1-flex-原理"},{"level":3,"title":"2. 常见父项属性","slug":"_2-常见父项属性"},{"level":3,"title":"3. 常见子项属性","slug":"_3-常见子项属性"},{"level":2,"title":"八、rem 适配布局","slug":"八、rem-适配布局"},{"level":3,"title":"1. rem 基础","slug":"_1-rem-基础"},{"level":3,"title":"2. 媒体查询","slug":"_2-媒体查询"},{"level":3,"title":"3. Less","slug":"_3-less"},{"level":3,"title":"4. rem 适配方案","slug":"_4-rem-适配方案"},{"level":2,"title":"九、响应式布局","slug":"九、响应式布局"},{"level":3,"title":"1. 响应式开发","slug":"_1-响应式开发"},{"level":3,"title":"2. Bootstrap","slug":"_2-bootstrap"},{"level":3,"title":"3. Bootstrap 栅格系统","slug":"_3-bootstrap-栅格系统"}],"relativePath":"docs/mobile.md","lastUpdated":1645422369391.432}';var p={};const o=n('<h2 id="一、移动端基础"><a class="header-anchor" href="#一、移动端基础" aria-hidden="true">#</a> 一、移动端基础</h2><p>兼容移动端主流浏览器，处理 Webkit 内核浏览器即可</p><p>常见移动端屏幕尺寸：</p><p><img src="https://s4.ax1x.com/2022/02/21/HX7pIs.png" alt="HX7pIs.png"></p><p>学会用谷歌浏览器模拟手机界面以及调试</p><h2 id="二、视口"><a class="header-anchor" href="#二、视口" aria-hidden="true">#</a> 二、视口</h2><p>视口（viewport）就是浏览器显示页面内容的屏幕区域，视口可以分为布局视口、视觉视口和理想视口</p><h3 id="_1-布局视口-layout-viewport"><a class="header-anchor" href="#_1-布局视口-layout-viewport" aria-hidden="true">#</a> 1. 布局视口 layout viewport</h3><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的 PC 端页面在手机上显示的问题</li><li>iOS, Android 基本都将这个视口分辨率设置为 980px，所以 PC 上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页</li></ul><p><img src="https://s4.ax1x.com/2022/02/21/HXTg8x.png" alt="HXTg8x.png"></p><h3 id="_2-视觉视口-visual-viewport"><a class="header-anchor" href="#_2-视觉视口-visual-viewport" aria-hidden="true">#</a> 2. 视觉视口 visual viewport</h3><p>字面意思，它是用户正在看到的网站的区域，注意：是网站的区域</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTsa9.png" alt="HXTsa9.png"></p><h3 id="_3-理想视口-ideal-viewport"><a class="header-anchor" href="#_3-理想视口-ideal-viewport" aria-hidden="true">#</a> 3. 理想视口 ideal viewport</h3><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写 meta 视口标签通知浏览器操作</p><p>meta 视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</p><h3 id="_4-meta-视口标签"><a class="header-anchor" href="#_4-meta-视口标签" aria-hidden="true">#</a> 4. meta 视口标签</h3><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre></div><p><img src="https://s4.ax1x.com/2022/02/21/HXTcP1.png" alt="HXTcP1.png"></p><p>最标准的 viewport 设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例 1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例 1.0</li><li>最小允许的缩放比例 1.0</li></ul><h2 id="三、二倍图"><a class="header-anchor" href="#三、二倍图" aria-hidden="true">#</a> 三、二倍图</h2><h3 id="_1-物理像素-物理像素比"><a class="header-anchor" href="#_1-物理像素-物理像素比" aria-hidden="true">#</a> 1. 物理像素 &amp; 物理像素比</h3><ul><li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的，这是厂商在出厂时就设置好了,比如苹果 6 是 750* 1334</li><li>我们开发时候的 1px 不是一定等于 1 个物理像素的</li><li>PC 端页面，1 个 px 等于 1 个物理像素，但是移动端就不尽相同</li><li>一个 px 的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</li></ul><div class="language-css"><pre><code><span class="token comment">/* 1. 物理像素 就是我们说的分辨率  iPhone8的物理像素是 750 */</span>\n<span class="token comment">/* 2. 在 iPhone8里面  1px 开发像素  =  2个物理像素  */</span>\n</code></pre></div><ul><li>Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度</li><li>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</li><li>在标准的 viewport 设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</li><li>通常使用二倍图， 因为 iPhone 6 的影响背景图片 注意缩放问题</li></ul><div class="language-css"><pre><code><span class="token comment">/* 我们需要一个50*50像素（css像素）的图片 直接放到我们的iphone8 里面会放大2倍  100* 100 就会模糊 */</span>\n<span class="token comment">/* 我们采取的是 放一个 100* 100 图片  然后手动的把这个图片 缩小为 50* 50 （css像素） */</span>\n<span class="token comment">/* 我们准备的图片 比我们实际需要的大小 大2倍，这就方式就是 2倍图 */</span>\n</code></pre></div><h3 id="_2-背景缩放-background-size"><a class="header-anchor" href="#_2-背景缩放-background-size" aria-hidden="true">#</a> 2. 背景缩放 background-size</h3><p>background-size 属性规定背景图像的尺寸</p><div class="language-css"><pre><code><span class="token property">background-size</span><span class="token punctuation">:</span> 背景图片宽度 背景图片高度<span class="token punctuation">;</span>\n\n<span class="token comment">/* 1.只写一个参数 肯定是宽度 高度省略了  会等比例缩放 */</span>\n</code></pre></div><p>单位： 长度 | 百分比 | cover | contain</p><ul><li>cover 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域（要完全覆盖 div 盒子 可能有部分背景图片显示不全）</li><li>contain 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域（当宽度 或者高度 铺满 div 盒子就不再进行拉伸了 可能有部分空白区域）</li></ul><h2 id="四、移动端开发选择"><a class="header-anchor" href="#四、移动端开发选择" aria-hidden="true">#</a> 四、移动端开发选择</h2><ol><li><p>单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile) 可以打开移动端，通过判断设备，如果是移动设备打开，则跳到移动端页面</p><p>也就是说，PC 端和移动端为两套网站，pc 端是 pc 断的样式，移动端在写一套，专门针对移动端适配的一套网站</p></li><li><p>响应式页面兼容移动端（其次）</p><p>响应式网站：即 pc 和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p></li></ol><h2 id="五、移动端技术解决方案"><a class="header-anchor" href="#五、移动端技术解决方案" aria-hidden="true">#</a> 五、移动端技术解决方案</h2><ol><li><p><strong>移动端浏览器兼容问题</strong></p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑 webkit 兼容性问题</p><p>我们可以放心使用 H5 标签和 CSS3 样式</p><p>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p></li><li><p><strong>移动端公共样式</strong></p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的 bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener noreferrer">http://necolas.github.io/normalize.css/</a></p></li><li><p><strong>移动端大量使用 CSS3 盒子模型 box-sizin</strong></p><p>传统模式宽度计算：盒子的宽度 = CSS 中设置的 width + border + padding</p><p>CSS3 盒子模型：盒子的宽度 = CSS 中设置的宽度 width 里面包含了 border 和 padding</p><p>也就是说，我们的 CSS3 中的盒子模型， padding 和 border 不会撑大盒子了</p><div class="language-css"><pre><code><span class="token comment">/*CSS3盒子模型*/</span>\n<span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n<span class="token comment">/*传统盒子模型*/</span>\n<span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>\n</code></pre></div></li><li><p>特殊样式</p><div class="language-css"><pre><code><span class="token comment">/*CSS3盒子模型*/</span>\n<span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n<span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n<span class="token comment">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span>\n<span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>\n<span class="token comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span>\n<span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token comment">/*禁用长按页面时的弹出菜单*/</span>\n<span class="token selector">img,\na</span> <span class="token punctuation">{</span>\n  <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h2 id="六、移动端常见布局"><a class="header-anchor" href="#六、移动端常见布局" aria-hidden="true">#</a> 六、移动端常见布局</h2><p>移动端单独制作</p><ul><li><p>流式布局（百分比布局）</p><p>流式布局，就是百分比布局，也称非固定像素布局，通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充，流式布局方式是移动 web 开发使用的比较常见的布局方式</p><p>max-width 最大宽度（max-height 最大高度）</p><p>min-width 最小宽度（min-height 最小高度）</p></li><li><p>flex 弹性布局（强烈推荐）</p></li><li><p>less+rem+媒体查询布局</p></li><li><p>混合布局</p></li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><h2 id="七、flex-布局"><a class="header-anchor" href="#七、flex-布局" aria-hidden="true">#</a> 七、flex 布局</h2><p><strong>传统布局</strong></p><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><p><strong>flex 布局</strong></p><ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc 端浏览器支持情况比较差</li><li>IE11 或更低版本不支持 flex 或仅支持部分</li></ul><p><strong>建议</strong></p><ul><li>如果是 pc 端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的 pc 则采用 flex</li></ul><div class="language-css"><pre><code><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n</code></pre></div><h3 id="_1-flex-原理"><a class="header-anchor" href="#_1-flex-原理" aria-hidden="true">#</a> 1. flex 原理</h3><ul><li>flex 是 flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效</li><li>flex 布局又叫伸缩布局、弹性布局、伸缩盒布局、弹性盒布局</li><li>采用 flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;，它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;</li></ul><p><strong>总结</strong>：就是通过给父盒子添加 flex 属性，来控制子盒子的位置和排列方式</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTBb4.png" alt="HXTBb4.png"></p><h3 id="_2-常见父项属性"><a class="header-anchor" href="#_2-常见父项属性" aria-hidden="true">#</a> 2. 常见父项属性</h3><p>以下由 6 个属性是对父元素设置的</p><ul><li><p>flex-direction：设置主轴的方向（即项目的排列方向）</p><p>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有：行和列、x 轴和 y 轴；默认主轴方向就是 x 轴方向，水平向右；默认侧轴方向就是 y 轴方向，水平向下</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTwKU.png" alt="HXTwKU.png"></p></li><li><p>justify-content：设置主轴上的子元素排列方式</p><p><img src="https://s4.ax1x.com/2022/02/21/HXT226.png" alt="HXT226.png"></p></li><li><p>flex-wrap：设置子元素是否换行</p><p>默认情况下，项目都排在一条线（又称” 轴线” ）上，flex-wrap 属性定义，flex 布局中默认是不换行的（如果装不开，会缩小子元素的宽度，放到父元素里面）</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTRxK.png" alt="HXTRxK.png"></p></li><li><p>align-items：设置侧轴上的子元素的排列方式（单行）</p><p>该属性是控制子项在侧轴（默认是 y 轴）上的排列方式 在子项为单项（单行）的时候使用</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTfKO.png" alt="HXTfKO.png"></p><p>！stretch: 默认值</p><p>*拉伸，子盒子不要给高度</p></li><li><p>align-content：设置侧轴上的子元素排列方式（多行）</p><p>设置子项在侧轴上的排列方式，并且只能用于子项出现换行的情况（多行），在单行下是没有效果的</p><p><img src="https://s4.ax1x.com/2022/02/21/HXT4qe.png" alt="HXT4qe.png"></p><p>单行找 align-items</p><p>多行（换行）找 align-content</p></li><li><p>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</p><div class="language-css"><pre><code><span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>\n</code></pre></div></li></ul><h3 id="_3-常见子项属性"><a class="header-anchor" href="#_3-常见子项属性" aria-hidden="true">#</a> 3. 常见子项属性</h3><ul><li><p>flex：子项目占的份数</p><p>flex 属性定义子项目分配剩余空间，用 flex 来表示占多少份数</p><div class="language-css"><pre><code><span class="token selector">.item</span> <span class="token punctuation">{</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token comment">/* default 0 */</span>\n  <span class="token comment">/* flex: 20% 还可以用百分比表示占父元素的比例*/</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>align-self：控制子项自己在侧轴的排列方式</p><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch</p><div class="language-css"><pre><code><span class="token selector">span:nth-child(2)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 设置自己在侧轴上的排列方式 */</span>\n  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>order：属性定义子项的排列顺序（前后顺序）</p><p>数值越小，排列越靠前，默认为 0</p><p>注意： 和 z-index 不一样</p><div class="language-css"><pre><code><span class="token selector">.item</span> <span class="token punctuation">{</span>\n  <span class="token property">order</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h2 id="八、rem-适配布局"><a class="header-anchor" href="#八、rem-适配布局" aria-hidden="true">#</a> 八、rem 适配布局</h2><ol><li><p>页面布局文字能否随着屏幕大小变化而变化？</p></li><li><p>流式布局和 flex 布局主要针对于宽度布局，那高度如何设置？</p></li><li><p>怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放？</p></li></ol><h3 id="_1-rem-基础"><a class="header-anchor" href="#_1-rem-基础" aria-hidden="true">#</a> 1. rem 基础</h3><p>rem (root em)是一个相对单位，类似于 em，em 是父元素字体大小</p><p>不同的是 rem 的基准是相对于 html 元素的字体大小</p><p>比如， 根元素（html）设置 font-size: 12 px; 非根元素设置 width: 2 rem; 则换成 px 表示就是 24 px</p><p>rem 的优势：父元素文字大小可能不一致，但是整个页面只有一个 html，可以很好来控制整个页面的元素大小</p><h3 id="_2-媒体查询"><a class="header-anchor" href="#_2-媒体查询" aria-hidden="true">#</a> 2. 媒体查询</h3><p>媒体查询（Media Query）是 CSS3 新语法</p><ul><li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机、 Android 手机，平板等设备都用得到多媒体查询</li></ul><p>语法：</p><div class="language-css"><pre><code><span class="token atrule"><span class="token rule">@media</span> mediatype <span class="token keyword">and</span>|<span class="token keyword">not</span>|<span class="token keyword">only</span> <span class="token punctuation">(</span>media feature<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n\t\tCSS-Code<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 这句话的意思就是： 在我们屏幕上 并且 最大的宽度是 800像素 设置我们想要的样式 */</span>\n<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n    <span class="token selector">body</span> <span class="token punctuation">{</span>\n        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>用 @media 开头 注意@符号</li><li>mediatype 媒体类型</li><li>关键字 and not only</li><li>media feature 媒体特性 必须有小括号包含</li></ul><p><strong>mediatype 查询类型</strong></p><p>将不同的终端设备划分成不同的类型，称为媒体类型</p><p><img src="https://s4.ax1x.com/2022/02/21/HXThrD.png" alt="HXThrD.png"></p><p><strong>关键字</strong></p><p>关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略</li><li>only：指定某个特定的媒体类型，可以省略</li></ul><p><strong>媒体特性</strong></p><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格，我们暂且了解三个，注意他们要加小括号包含</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTHPI.png" alt="HXTHPI.png"></p><p>注意：为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p><p><strong>媒体查询 + rem 实现元素动态大小变化</strong></p><p>rem 单位是跟着 html 来走的，有了 rem 页面元素可以设置不同大小尺寸</p><p>媒体查询可以根据不同设备宽度来修改样式</p><p>媒体查询+rem 就可以实现不同设备宽度，实现页面元素大小的动态变化</p><p><strong>引入资源</strong></p><p>当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets（样式表）</p><p>原理， 就是直接在 link 中判断设备的尺寸，然后引用不同的 css 文件</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styleA.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>screen and (min-width: 400px)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre></div><h3 id="_3-less"><a class="header-anchor" href="#_3-less" aria-hidden="true">#</a> 3. Less</h3><p>CSS 弊端：CSS 是一门非程序式语言，没有变量、函数、 SCOPE（作用域）等概念</p><ul><li>CSS 需要书写大量看似没有逻辑的代码， CSS 冗余度是比较高的</li><li>不方便维护及扩展，不利于复</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目</li></ul><p>Less （Leaner Style Sheets 的缩写） 是一门 CSS 扩展语言，也称为 CSS 预处理器</p><p>作为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为 CSS 加入程序式语言的特性</p><p>它在 CSS 的语法基础之上，引入了变量， Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样， Less 可以让我们用更少的代码做更多的事情</p><p>Less 中文网址： <a href="http://lesscss.cn/" target="_blank" rel="noopener noreferrer">http://lesscss.cn/</a></p><p>常见的 CSS 预处理器： Sass、 Less、 Stylus</p><p>一句话： Less 是一门 CSS 预处理语言，它扩展了 CSS 的动态特性</p><p><strong>安装</strong></p><ol><li>安装 nodejs，可选择版本(8.0)，网址： <a href="http://nodejs.cn/download/" target="_blank" rel="noopener noreferrer">http://nodejs.cn/download/</a></li><li>检查是否安装成功，使用 cmd 命令（win10 是 window +r 打开 运行输入 cmd） --- 输入 <code>node –v</code> 查看版本即可</li><li>基于 nodejs 在线安装 Less，使用 cmd 命令 <code>npm install -g less</code> 即可</li><li>检查是否安装成功，使用 cmd 命令 <code>lessc -v</code> 查看版本即可</li></ol><p><strong>使用</strong></p><p>我们首先新建一个后缀名为 less 的文件， 在这个 less 文件里面书写 less 语句</p><ul><li><p>Less 变量</p><p>CSS 中的一些颜色和数值等经常使用</p><p><code>@变量名: 值;</code></p><div class="language-less"><pre><code><span class="token comment">// 定义一个粉色的变量</span>\n<span class="token variable">@color<span class="token punctuation">:</span></span> pink<span class="token punctuation">;</span>\n\n<span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">div</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>必须有@为前缀</p><ul><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul></li><li><p>Less 编译</p><p>本质上，Less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则，最终会通过解析器，编译生成对应的 CSS 文件</p><p>所以，我们需要把我们的 less 文件，编译生成为 css 文件，这样我们的 html 页面才能使用</p><p>在 VS Code 中可以使用 Easy LESS 插件自动编译生成 css 文件</p></li><li><p>Less 嵌套</p><p>子元素的样式直接写在父元素内</p><div class="language-less"><pre><code><span class="token selector">.header</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>\n  <span class="token selector">a</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对应的 CSS</p><div class="language-css"><pre><code><span class="token selector">.header</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.header a</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果遇见（ 交集 | 伪类 | 伪元素选择器 ）</p><ul><li>内层选择器的前面没有 &amp; 符号，则它被解析为父选择器的后代</li><li>如果有 &amp; 符号，它就被解析为父元素自身或父元素的伪类</li></ul><div class="language-less"><pre><code><span class="token selector">a</span> <span class="token punctuation">{</span>\n  <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对应的 CSS</p><div class="language-css"><pre><code><span class="token selector">a:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>Less 运算</p><p>任何数字、颜色或者变量都可以参与运算</p><p>Less 提供了加（+）、减（-）、乘（*）、除（/）算术运算</p><div class="language-less"><pre><code><span class="token comment">// Less 里面写</span>\n<span class="token variable">@witdh<span class="token punctuation">:</span></span> 10px <span class="token operator">+</span> 5<span class="token punctuation">;</span>\n\n<span class="token selector">div</span> <span class="token punctuation">{</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token variable">@witdh</span> solid red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-css"><pre><code><span class="token comment">/* 生成的css */</span>\n<span class="token selector">div</span> <span class="token punctuation">{</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 15px solid red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意：</p><ul><li>运算符中间左右有个空格隔开 <code>1px + 5</code></li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul></li><li><p>导入</p><p>可以在 less 中导入其他 less 文件</p><div class="language-less"><pre><code><span class="token comment">// 在 index.less 中导入 common.less 文件</span>\n<span class="token variable">@import</span> <span class="token string">&#39;common&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><h3 id="_4-rem-适配方案"><a class="header-anchor" href="#_4-rem-适配方案" aria-hidden="true">#</a> 4. rem 适配方案</h3><ul><li>让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备</li><li>使用媒体查询根据不同设备按比例设置 html 的字体大小，然后页面元素使用 rem 做尺寸单位，当 html 字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配</li></ul><p><strong>技术方案 1</strong></p><ul><li>less</li><li>媒体查询</li><li>rem</li></ul><p>设计稿常见尺寸宽度</p><p><img src="https://s4.ax1x.com/2022/02/21/HXToad.png" alt="HXToad.png"></p><p>一般情况下，我们以一套或两套效果图适应大部分的屏幕，放弃极端屏或对其优雅降级，牺牲一些效果</p><p>现在基本以 750 为准</p><p>动态设置 html 标签 font-size 大小</p><ol><li>假设设计稿是 750px</li><li>假设我们把整个屏幕划分为 15 等份（划分标准不一可以是 20 份也可以是 10 等份）</li><li>每一份作为 html 字体大小，这里就是 50px</li><li>那么在 320px 设备的时候，字体大小为 320/15 就是 21.33px</li><li>用我们页面元素的大小除以不同的 html 字体大小会发现他们比例还是相同的</li><li>比如我们以 750 为标准设计稿</li><li>一个 100*100 像素的页面元素在 750 屏幕下，就是 100/50 转换为 rem 是 2rem * 2 rem 比例是 1 比 1</li><li>320 屏幕下，html 字体大小为 21.33 则 2rem = 42.66px 此时宽和高都是 42.66 但是宽和高的比例还是 1 比 1</li><li>但是已经能实现不同屏幕下页面元素盒子等比例缩放的效果</li></ol><p>元素大小取值方法</p><ol><li>最后的公式：页面元素的 rem 值 = 页面元素值（px）/（屏幕宽度/划分的份数）</li><li>屏幕宽度/划分的份数 就是 html font-size 的大小</li><li>或者：页面元素的 rem 值 = 页面元素值（px）/ html font-size 字体大小</li></ol><p><strong>技术方案 2（推荐）</strong></p><ul><li><p>flexible.js</p><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面 js 做了处理</p><p>它的原理是把当前设备划分为 10 等份，但是不同设备下，比例还是一致的</p><p>我们要做的，就是确定好我们当前设备的 html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p>里面页面元素 rem 值：页面元素的 px 值 / 75</p><p>剩余的，让 flexible.js 来去算</p><p>github 地址： <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener noreferrer">https://github.com/amfe/lib-flexible</a></p></li><li><p>rem</p></li></ul><h2 id="九、响应式布局"><a class="header-anchor" href="#九、响应式布局" aria-hidden="true">#</a> 九、响应式布局</h2><h3 id="_1-响应式开发"><a class="header-anchor" href="#_1-响应式开发" aria-hidden="true">#</a> 1. 响应式开发</h3><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTbGt.png" alt="HXTbGt.png"></p><p><strong>布局容器</strong></p><p>响应式需要一个父级作为布局容器（container），来配合子级元素来实现变化效果</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）： 设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px</li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h3 id="_2-bootstrap"><a class="header-anchor" href="#_2-bootstrap" aria-hidden="true">#</a> 2. Bootstrap</h3><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架 Bootstrap 是基于 HTML、CSS 和 JavaScript 的，简洁灵活，使得 Web 开发更加快捷</p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件，使用者要按照框架所规定的某种规范进行开发</p><ul><li>中文官网：<a href="http://www.bootcss.com/" target="_blank" rel="noopener noreferrer">http://www.bootcss.com/</a></li><li>官网：<a href="http://getbootstrap.com/" target="_blank" rel="noopener noreferrer">http://getbootstrap.com/</a></li></ul><p><strong>优点</strong></p><ul><li>标准化的 html+css 编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><p><strong>Bootstrap 使用四步曲：</strong></p><ol><li>创建文件夹结构</li></ol><p><img src="https://s4.ax1x.com/2022/02/21/HXTLxf.png" alt="HXTLxf.png">]</p><ol start="2"><li>创建 html 骨架结构（基本模板）</li></ol><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh-CN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- Bootstrap --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anonymous<span class="token punctuation">&quot;</span></span>\n    <span class="token punctuation">/&gt;</span></span>\n\n    <span class="token comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span>\n    <span class="token comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span>\n    <span class="token comment">&lt;!--[if lt IE 9]&gt;\n      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;\n      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;\n    &lt;![endif]--&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anonymous<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件，你也可以根据需要只加载单个插件 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>\n      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anonymous<span class="token punctuation">&quot;</span></span>\n    <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ol start="3"><li>引入相关样式文件</li></ol><div class="language-html"><pre><code><span class="token comment">&lt;!-- Bootstrap 核心样式--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre></div><ol start="4"><li>书写内容</li></ol><p>直接拿 Bootstrap 预先定义好的样式来使用</p><ul><li>修改 Bootstrap 原来的样式，注意权重问题</li><li>学好 Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</li></ul><p><strong>布局容器</strong></p><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器，它提供了两个作此用处的类</p><ol><li>container 类</li></ol><ul><li>响应式布局的容器 固定宽度</li><li>大屏 (&gt;=1200px) 宽度定为 1170px</li><li>中屏 (&gt;=992px) 宽度定为 970px</li><li>小屏 (&gt;=768px) 宽度定为 750px</li><li>超小屏 (100%)</li></ul><ol start="2"><li>container-fluid 类</li></ol><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器</li></ul><h3 id="_3-bootstrap-栅格系统"><a class="header-anchor" href="#_3-bootstrap-栅格系统" aria-hidden="true">#</a> 3. Bootstrap 栅格系统</h3><p>栅格系统英文为 “grid systems” ,也有人翻译为“网格系统”，它是指将页面布局划分为等宽的列，然后通过列数的定义来模块化页面布局</p><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多 12 列</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTjsS.md.png" alt="HXTjsS.md.png"></p><p>按照不同屏幕划分为 1~12 等份</p><ul><li>行（row）可以去除父容器作用 15px 的边距</li><li>xs-extra small：超小；sm-small：小；md-medium：中等；lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右 15 像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数 例如 class=&quot;col-md-4 col-sm-6&quot;</li></ul><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xs-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 如果孩子的份数相加等于12 则孩子能占满整个 container 的宽度 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 如果孩子的份数相加 小于 12 则会？ 则占不满整个 container 的宽度 会有空白 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 如果孩子的份数相加 大于 12 则会？多于的那一列会 另起一行显示  --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><strong>列嵌套</strong></p><p>栅格系统内置的栅格系统将内容再次嵌套，简单理解就是一个列内再分成若干份小列</p><p>我们可以通过添加一个新的 .row 元素和一系列 .col-sm-_ 元素到已经存在的 .col-sm-_ 元素内</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTXM8.png" alt="HXTXM8.png"></p><div class="language-html"><pre><code><span class="token comment">&lt;!-- 列嵌套 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-sm-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 我们列嵌套最好加1个行 row 这样可以取消父元素的padding值 而且高度自动和父级一样高 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4 col-sm-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-8 col-sm-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><strong>列偏移</strong></p><p>使用 .col-md-offset-* 类可以将列向右侧偏移</p><p>这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTvqg.png" alt="HXTvqg.png"></p><div class="language-html"><pre><code><span class="token comment">&lt;!-- 列偏移 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-4 col-lg-offset-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><strong>列排序</strong></p><p>通过使用 .col-md-push-_ 和 .col-md-pull-_ 类就可以很容易的改变列（column）的顺序</p><p><img src="https://s4.ax1x.com/2022/02/21/HXTzZQ.png" alt="HXTzZQ.png"></p><div class="language-html"><pre><code><span class="token comment">&lt;!-- 列排序 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-4 col-lg-push-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-8 col-lg-pull-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><strong>响应式工具</strong></p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能， 并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容</p><p><img src="https://s4.ax1x.com/2022/02/21/HX7Saj.png" alt="HX7Saj.png"></p><p><strong>屏幕划分分析（例）</strong></p><ol><li><p>屏幕缩放发现中屏幕和大屏幕布局是一致的</p><p>因此我们列定义为 col-md- 就可以了，md 是大于等于 970 以上的</p></li><li><p>屏幕缩放发现小屏幕布局发生变化，因此我们需要为小屏幕根据需求改变布局</p></li><li><p>屏幕缩放发现超小屏幕布局又发生变化，因此我们需要为超小屏幕根据需求改变布局</p></li><li><p>策略：我们先布局 md 以上的 pc 端布局，最后根据实际需求在修改小屏幕 和超小屏幕的特殊布局样式</p></li></ol><p><strong>Glyphicons 字体图标</strong></p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>glyphicon glyphicon-align-left<span class="token punctuation">&quot;</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>通过类来实现字体图标，原理：添加伪元素 before</p>',181);p.render=function(n,t,p,l,e,c){return a(),s("div",null,[o])};export default p;export{t as __pageData};
