import{g as n,j as s,t as a,G as p,l as t,f as o}from"./common-bec3f312.js";const e='{"title":"前端笔记 | Ajax","frontmatter":{"date":"2022-01-28","title":"前端笔记 | Ajax","tags":["前端笔记","Ajax"],"describe":"Ajax 学习笔记"},"headers":[{"level":2,"title":"一、服务器的基本概念与初识 Ajax","slug":"一、服务器的基本概念与初识-ajax"},{"level":3,"title":"1. 客户端与服务器","slug":"_1-客户端与服务器"},{"level":3,"title":"2. 了解 Ajax","slug":"_2-了解-ajax"},{"level":3,"title":"3. jQuery 中的 Ajax","slug":"_3-jquery-中的-ajax"},{"level":3,"title":"4. 接口","slug":"_4-接口"},{"level":2,"title":"二、form 表单与模板引擎","slug":"二、form-表单与模板引擎"},{"level":3,"title":"1. form 表单的基本使用","slug":"_1-form-表单的基本使用"},{"level":3,"title":"2. 通过 Ajax 提交表单数据","slug":"_2-通过-ajax-提交表单数据"},{"level":3,"title":"3. 模板引擎","slug":"_3-模板引擎"},{"level":2,"title":"三、Ajax 加强","slug":"三、ajax-加强"},{"level":3,"title":"1. XMLHttpRequest 的基本使用","slug":"_1-xmlhttprequest-的基本使用"},{"level":3,"title":"2. 数据交换格式","slug":"_2-数据交换格式"},{"level":3,"title":"3. XMLHttpRequest Level2 的新特性","slug":"_3-xmlhttprequest-level2-的新特性"},{"level":3,"title":"4. axios","slug":"_4-axios"},{"level":2,"title":"四、跨域与 JSONP","slug":"四、跨域与-jsonp"},{"level":3,"title":"1. 了解同源策略和跨域","slug":"_1-了解同源策略和跨域"},{"level":3,"title":"2. JSONP","slug":"_2-jsonp"},{"level":2,"title":"五、HTTP","slug":"五、http"},{"level":3,"title":"1. HTTP 请求消息","slug":"_1-http-请求消息"},{"level":3,"title":"2. HTTP 响应消息","slug":"_2-http-响应消息"},{"level":3,"title":"3. HTTP 请求方法","slug":"_3-http-请求方法"},{"level":3,"title":"4. HTTP 响应状态码","slug":"_4-http-响应状态码"}],"relativePath":"docs/Ajax.md","lastUpdated":1645772482478.6594}';var c={};const l=p('<h2 id="一、服务器的基本概念与初识-ajax"><a class="header-anchor" href="#一、服务器的基本概念与初识-ajax" aria-hidden="true">#</a> 一、服务器的基本概念与初识 Ajax</h2><h3 id="_1-客户端与服务器"><a class="header-anchor" href="#_1-客户端与服务器" aria-hidden="true">#</a> 1. <strong>客户端与服务器</strong></h3><p>上网过程中，负责存放和对外提供资源的电脑，叫做服务器</p><p>上网过程中，负责获取和消费资源的电脑，叫做客户端</p><p><strong>URL 地址</strong></p><p>URL（全称是 UniformResourceLocator）中文叫统一资源定位符，用于标识互联网上每个资源的唯一存放位置</p><p>浏览器只有通过 URL 地址，才能正确定位资源的存放位置，从而成功访问到对应的资源</p><p>例如：<a href="http://www.baidu.com" target="_blank" rel="noopener noreferrer">http://www.baidu.com</a></p><p>URL 地址一般由三部组成：</p><ol><li>客户端与服务器之间的通信协议</li><li>存有该资源的服务器名称</li><li>资源在服务器上具体的存放位置</li></ol><p><img src="https://s4.ax1x.com/2022/02/25/bAwmM8.png" alt="bAwmM8.png"></p><p><strong>图解客户端与服务器的通信过程</strong></p><p><img src="https://s4.ax1x.com/2022/02/25/bAdoKU.png" alt="bAdoKU.png"></p><p>注意：</p><ol><li>客户端与服务器之间的通信过程，分为 请求 – 处理 – 响应 三个步骤</li><li>网页中的每一个资源，都是通过 请求 – 处理 – 响应 的方式从服务器获取回来的</li></ol><p><strong>网页中如何请求数据</strong></p><p>如果要在网页中请求服务器上的数据资源，则需要用到 XMLHttpRequest 对象</p><p>XMLHttpRequest（简称 xhr）是浏览器提供的 js 成员，通过它，可以请求服务器上的数据资源</p><p>最简单的用法 <code>var xhrObj = new XMLHttpRequest()</code></p><p><strong>资源的请求方式</strong></p><p>客户端请求服务器时， 请求的方式有很多种，最常见的两种请求方式分别为 get 和 post 请求</p><ul><li><p>get 请求通常用于获取服务端资源（向服务器要资源）</p><p>例如：根据 URL 地址，从服务器获取 HTML 文件、 css 文件、 js 文件、图片文件、数据资源等</p></li><li><p>post 请求通常用于向服务器提交数据（往服务器发送资源）</p><p>例如：登录时向服务器提交的登录信息、注册时向服务器提交的注册信息、添加用户时向服务器提交的用户信息等各种数据提交操作</p></li></ul><h3 id="_2-了解-ajax"><a class="header-anchor" href="#_2-了解-ajax" aria-hidden="true">#</a> 2. 了解 Ajax</h3><p>Ajax 的全称是 Asynchronous Javascript And XML（异步 JavaScript 和 XML）</p><p>通俗的理解：在网页中利用 XMLHttpRequest 对象和服务器进行数据交互的方式，就是 Ajax</p><p>Ajax 能让我们轻松实现网页与服务器之间的数据交互</p><p>Ajax 的典型应用场景</p><p>用户名检测：注册用户时，通过 ajax 的形式，动态检测用户名是否被占用</p><p>搜索提示：当输入搜索关键字时，通过 ajax 的形式，动态加载搜索提示列表</p><p>数据的增删改查：数据的添加、删除、修改、查询操作，都需要通过 ajax 的形式，来实现数据的交互</p><h3 id="_3-jquery-中的-ajax"><a class="header-anchor" href="#_3-jquery-中的-ajax" aria-hidden="true">#</a> 3. jQuery 中的 Ajax</h3><p>浏览器中提供的 XMLHttpRequest 用法比较复杂，所以 jQuery 对 XMLHttpRequest 进行了封装，提供了一系列 Ajax 相关的函数，极大地降低了 Ajax 的使用难度</p><p>jQuery 中发起 Ajax 请求最常用的三个方法如下：</p><ul><li>$.get()</li><li>$.post()</li><li>$.ajax()</li></ul><p><code>$.get()</code></p><div class="language-jsx"><pre><code>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://s4.ax1x.com/2022/02/25/bAd42V.png" alt="bAd42V.png"></p><div class="language-jsx"><pre><code><span class="token comment">// 不带参数的请求，直接提供请求的 URL 地址和请求成功之后的回调函数即可</span>\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.liulongbin.top:3006/api/getbooks&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 这里的 res 是服务器返回的数据</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 带参数的请求</span>\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.liulongbin.top:3006/api/getbooks&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><code>$.post()</code></p><div class="language-jsx"><pre><code>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://s4.ax1x.com/2022/02/25/bAdh80.png" alt="bAdh80.png"></p><div class="language-jsx"><pre><code>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;http://www.liulongbin.top:3006/api/addbook&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求的URL地址</span>\n  <span class="token punctuation">{</span> bookname<span class="token operator">:</span> <span class="token string">&#39;水浒传&#39;</span><span class="token punctuation">,</span> author<span class="token operator">:</span> <span class="token string">&#39;施耐庵&#39;</span><span class="token punctuation">,</span> publisher<span class="token operator">:</span> <span class="token string">&#39;上海图书出版社&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 提交的数据</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 回调函数</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p><code>$.ajax()</code></p><div class="language-jsx"><pre><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求的方式，例如 GET 或 POST</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求的 URL 地址</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 这次请求要携带的数据</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 请求成功之后的回调函数</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求的方式</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/getbooks&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求的 URL 地址</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 这次请求要携带的数据</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 请求成功之后的回调函数</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求的方式</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/addbook&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求的 URL 地址</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 要提交给服务器的数据</span>\n    bookname<span class="token operator">:</span> <span class="token string">&#39;水浒传&#39;</span><span class="token punctuation">,</span>\n    author<span class="token operator">:</span> <span class="token string">&#39;施耐庵&#39;</span><span class="token punctuation">,</span>\n    publisher<span class="token operator">:</span> <span class="token string">&#39;上海图书出版社&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 请求成功之后的回调函数</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="_4-接口"><a class="header-anchor" href="#_4-接口" aria-hidden="true">#</a> 4. 接口</h3><p>使用 Ajax 请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口），同时，每个接口必须有请求方式</p><p>例如：</p><p><a href="http://www.liulongbin.top:3006/api/getbooks" target="_blank" rel="noopener noreferrer">http://www.liulongbin.top:3006/api/getbooks</a> 获取图书列表的接口(GET 请求)</p><p><a href="http://www.liulongbin.top:3006/api/addbook" target="_blank" rel="noopener noreferrer">http://www.liulongbin.top:3006/api/addbook</a> 添加图书的接口（POST 请求）</p><p><strong>接口测试工具</strong></p><p>为了验证接口能否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测</p><p>常用的是 postman</p><p>官网：<a href="https://www.getpostman.com/downloads/" target="_blank" rel="noopener noreferrer">https://www.getpostman.com/downloads/</a></p><p><strong>接口文档</strong></p><p>接口文档，顾名思义就是接口的说明文档，它是我们调用接口的依据，好的接口文档包含了对接口 URL， 参数以及输出内容的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用</p><p>一个合格的接口文档，应该包含以下 6 项内容，从而为接口的调用提供依据：</p><ol><li>接口名称： 用来标识各个接口的简单说明，如登录接口， 获取图书列表接口等</li><li>接口 URL：接口的调用地址</li><li>调用方式：接口的调用方式，如 GET 或 POST</li><li>参数格式：接口需要传递的参数， 每个参数必须包含参数名称、 参数类型、 是否必选、 参数说明这 4 项内容</li><li>响应格式：接口的返回值的详细描述，一般包含数据名称、 数据类型、 说明 3 项内容</li><li>返回示例（可选）：通过对象的形式，例举服务器返回数据的结构</li></ol><p><img src="https://s4.ax1x.com/2022/02/25/bAdfCq.png" alt="bAdfCq.png"></p><h2 id="二、form-表单与模板引擎"><a class="header-anchor" href="#二、form-表单与模板引擎" aria-hidden="true">#</a> 二、form 表单与模板引擎</h2><h3 id="_1-form-表单的基本使用"><a class="header-anchor" href="#_1-form-表单的基本使用" aria-hidden="true">#</a> 1. form 表单的基本使用</h3><p>表单在网页中主要负责数据采集功能</p><p>HTML 中的 <code>&lt;form&gt;</code> 标签，就是用于采集用户输入的信息，并通过 <code>&lt;form&gt;</code> 标签的提交操作，把采集到的信息提交到服务器端进行处理</p><p>表单由三个基本部分组成：</p><ul><li><p>表单标签</p></li><li><p>表单域</p><p>包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等</p></li><li><p>表单按钮</p></li></ul><p><code>&lt;form&gt;</code>标签用来采集数据，<code>&lt;form&gt;</code>标签的属性则是用来规定如何把采集到的数据发送到服务器</p><p><img src="https://s4.ax1x.com/2022/02/25/bAd5vT.png" alt="bAd5vT.png"></p><ol><li><p>action</p><p>action 属性用来规定当提交表单时，向何处发送表单数据</p><p>action 属性的值应该是后端提供的一个 URL 地址，这个 URL 地址专门负责接收表单提交过来的数据</p><p>当 <code>&lt;form&gt;</code> 表单在未指定 action 属性值的情况下， action 的默认值为当前页面的 URL 地址</p><p>注意：当提交表单后，页面会立即跳转到 action 属性指定的 URL 地址</p></li><li><p>target</p><p>target 属性用来规定在何处打开 action URL</p><p>它的可选值有 5 个，默认情况下， target 的值是 _self，表示在相同的框架中打开 action URL</p><p><img src="https://s4.ax1x.com/2022/02/25/bAdTrF.png" alt="bAdTrF.png"></p></li><li><p>method</p><p>method 属性用来规定以何种方式把表单数据提交到 action URL</p><p>它的可选值有两个，分别是 get 和 post</p><p>默认情况下， method 的值为 get，表示通过 URL 地址的形式，把表单数据提交到 action URL</p><p>注意：</p><p>get 方式适合用来提交少量的、简单的数据</p><p>post 方式适合用来提交大量的、 复杂的、或包含文件上传的数据</p><p>在实际开发中， <code>&lt;form&gt;</code> 表单的 post 提交方式用的最多，很少用 get，例如登录、注册、添加数据等表单操作，都需要使用 post 方式来提交表单</p></li><li><p>enctype</p><p>用来规定在发送表单数据之前如何对数据进行编码</p><p><img src="https://s4.ax1x.com/2022/02/25/bAd7b4.png" alt="bAd7b4.png"></p></li></ol><p><strong>表单的同步提交及缺点</strong></p><p>通过点击 submit 按钮，触发表单提交的操作，从而使页面跳转到 action URL 的行为，叫做表单的同步提交</p><p>缺点：</p><ol><li><code>&lt;form&gt;</code>表单同步提交后，整个页面会发生跳转，跳转到 action URL 所指向的地址，用户体验很差</li><li><code>&lt;form&gt;</code>表单同步提交后，页面之前的状态和数据会丢失</li></ol><p>解决方案：表单只负责采集数据，Ajax 负责将数据提交到服务器</p><h3 id="_2-通过-ajax-提交表单数据"><a class="header-anchor" href="#_2-通过-ajax-提交表单数据" aria-hidden="true">#</a> 2. 通过 Ajax 提交表单数据</h3><p><strong>监听表单提交事件</strong></p><p>在 jQuery 中，可以使用如下两种方式，监听到表单的提交事件：</p><div class="language-jsx"><pre><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#form1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;监听到了表单的提交事件&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#form1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;监听到了表单的提交事件&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>阻止表单默认提交行为</strong></p><p>当监听到表单的提交事件以后，可以调用事件对象的 event.preventDefault() 函数，来阻止表单的提交和页面的跳转，示例代码如下：</p><div class="language-jsx"><pre><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#form1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 阻止表单的提交和页面的跳转</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#form1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 阻止表单的提交和页面的跳转</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>快速获取表单中的数据</strong></p><p>为了简化表单中数据的获取操作， jQuery 提供了 <code>serialize()</code> 函数，其语法格式如下：</p><div class="language-jsx"><pre><code><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>serialize() 函数的好处：可以一次性获取到表单中的所有的数据</p><div class="language-jsx"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token operator">...</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#form1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 调用的结果：</span>\n<span class="token comment">// username=用户名的值&amp;password=密码的值</span>\n</code></pre></div><p>注意：在使用 serialize() 函数快速获取表单数据时， 必须为每个表单元素添加 name 属性</p><h3 id="_3-模板引擎"><a class="header-anchor" href="#_3-模板引擎" aria-hidden="true">#</a> 3. 模板引擎</h3><p>模板引擎，顾名思义，它可以根据程序员指定的模板结构和数据，自动生成一个完整的 HTML 页面</p><p>好处</p><ol><li>减少了字符串的拼接操作</li><li>使代码结构更清晰</li><li>使代码更易于阅读与维护</li></ol><h4 id="art-template"><a class="header-anchor" href="#art-template" aria-hidden="true">#</a> art-template</h4><p>art-template 是一个简约、超快的模板引擎，中文官网首页为： <a href="http://aui.github.io/art-template/zh-cn/index.html" target="_blank" rel="noopener noreferrer">http://aui.github.io/art-template/zh-cn/index.html</a></p><p><strong>基本使用</strong></p><ol><li><p>导入 art-template</p><p><code>&lt;script src=&quot;./lib/template-web.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>定义数据</p><div class="language-jsx"><pre><code><span class="token comment">// 2. 定义需要渲染的数据</span>\n<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> test<span class="token operator">:</span> <span class="token string">&#39;&lt;h3&gt;测试原文输出&lt;/h3&gt;&#39;</span><span class="token punctuation">,</span> flag<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;吃饭&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;睡觉&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;写代码&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> regTime<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n</code></pre></div></li><li><p>定义模板</p><div class="language-jsx"><pre><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3.</span> 定义模板 <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3.1</span> 模板的 <span class="token constant">HTML</span> 结构，必须定义到 script 中 <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/html<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tpl-user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  &lt;h1&gt;{{name}}    ------    {{age}}&lt;/h1&gt;\n  {{@ test}}\n\n  &lt;div&gt;\n    {{if flag === 0}}\n    flag的值是0\n    {{else if flag === 1}}\n    flag的值是1\n    {{/if}}\n  &lt;/div&gt;\n\n  &lt;ul&gt;\n    {{each hobby}}\n    &lt;li&gt;索引是:{{$index}}，循环项是:{{$value}}&lt;/li&gt;\n    {{/each}}\n  &lt;/ul&gt;\n\n  &lt;h3&gt;{{regTime | dateFormat}}&lt;/h3&gt;\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>调用 template 函数</p><div class="language-jsx"><pre><code><span class="token comment">// 4. 调用 template 函数</span>\n<span class="token keyword">var</span> htmlStr <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;tpl-user&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>渲染 HTML 结构</p><div class="language-jsx"><pre><code><span class="token comment">// 5. 渲染HTML结构</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span>\n</code></pre></div></li></ol><p><strong>标准语法</strong></p>',95),u=t("art-template 提供了 "),i=t(" 这种语法格式，在 "),k=t(" 内可以进行变量输出，或循环数组等操作，这种 "),r=t(" 语法在 art-template 中被称为标准语法"),d=p('<p>输出</p><p>可以进行变量的输出、 对象属性的输出、 三元表达式输出、 逻辑或输出、 加减乘除等表达式输出</p><div class="language-jsx"><pre><code><span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    value\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    obj<span class="token punctuation">.</span>key\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    obj<span class="token punctuation">[</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    a <span class="token operator">?</span> b <span class="token operator">:</span> c\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    a <span class="token operator">||</span> b\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    a <span class="token operator">+</span> b\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>原文输出</p><div class="language-jsx"><pre><code><span class="token punctuation">{</span><span class="token punctuation">{</span>@ value <span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre></div><p>如果要输出的 value 值中，包含了 HTML 标签结构，则需要使用原文输出语法，才能保证 HTML 标签被正常渲染</p><p>条件输出</p><div class="language-jsx"><pre><code><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\t\t按需输出的内容\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> v1<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\t\t按需输出的内容\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span> <span class="token keyword">if</span> v2<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\t\t按需输出的内容\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre></div><p>循环输出</p><p>当前循环的索引使用 <code>$index</code> 进行访问，当前的循环项使用 <code>$value</code> 进行访问</p><div class="language-jsx"><pre><code><span class="token punctuation">{</span><span class="token punctuation">{</span>each arr<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\t\t<span class="token punctuation">{</span><span class="token punctuation">{</span>$index<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>each<span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre></div><p>过滤器</p><div class="language-jsx"><pre><code><span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    value <span class="token operator">|</span> filterName\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>定义过滤器的基本语法如下：</p><div class="language-jsx"><pre><code>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function-variable function">filterName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/*return处理的结果*/</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 定义处理时间的过滤器</span>\ntemplate<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function-variable function">dateFormat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> y <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> m <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">var</span> d <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> y <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> d\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>实现原理</strong></p><p>正则与字符串操作</p><p><code>exec()</code> 函数用于检索字符串中的正则表达式的匹配</p><div class="language-jsx"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span>\n\n<span class="token comment">// 输出的结果[&quot;o&quot;, index: 4, input: &quot;hello&quot;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>正则表达式中 () 包起来的内容表示一个分组，可以通过分组来提取自己想要的内容，示例代码如下</p><div class="language-jsx"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;我是{{name}}&lt;/div&gt;&#39;</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{{([a-zA-Z]+)}}</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">var</span> patternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">)</span>\n<span class="token comment">// 得到 name 相关的分组信息</span>\n<span class="token comment">// [&quot;{{name}}&quot;, &quot;name&quot;, index: 7, input: &quot;&lt;div&gt;我是{{name}}&lt;/div&gt;&quot;, groups: undefined]</span>\n</code></pre></div><p>字符串的 replace 函数</p><p>replace() 函数用于在字符串中用一些字符替换另一些字符，语法格式如下：</p><div class="language-jsx"><pre><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 得到的 result 的值为字符串 &#39;abc456&#39;</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;我是{{name}}&lt;/div&gt;&#39;</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{{([a-zA-Z]+)}}</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">var</span> patternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> patternResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// replace 函数返回值为替换后的新字符串</span>\n\n<span class="token comment">// 输出的内容是： &lt;div&gt;我是name&lt;/div&gt;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n</code></pre></div><p>多次 replace</p><div class="language-jsx"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;{{name}}今年{{ age }}岁了&lt;/div&gt;&#39;</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{{\\s*([a-zA-Z]+)\\s*}}</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// \\s 匹配空格 * 0次或者更多次</span>\n<span class="token keyword">var</span> patternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> patternResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 输出 &lt;div&gt;name今年{{ age }}岁了&lt;/div&gt;</span>\npatternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> patternResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 输出 &lt;div&gt;name今年age岁了&lt;/div&gt;</span>\npatternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">)</span> <span class="token comment">// 输出 null</span>\n</code></pre></div><p>使用 while 循环 replace</p><div class="language-jsx"><pre><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;{{name}}今年{{ age }}岁了&lt;/div&gt;&#39;</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{{\\s*([a-zA-Z]+)\\s*}}</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">var</span> patternResult <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>patternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> patternResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 输出 &lt;div&gt;name今年age岁了&lt;/div&gt;</span>\n</code></pre></div><p>replace 替换为真值</p><div class="language-jsx"><pre><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;{{name}}今年{{ age }}岁了&lt;/div&gt;&#39;</span>\n<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{{\\s*([a-zA-Z]+)\\s*}}</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">var</span> patternResult <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>patternResult <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patternResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>patternResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n</code></pre></div><h2 id="三、ajax-加强"><a class="header-anchor" href="#三、ajax-加强" aria-hidden="true">#</a> 三、Ajax 加强</h2><h3 id="_1-xmlhttprequest-的基本使用"><a class="header-anchor" href="#_1-xmlhttprequest-的基本使用" aria-hidden="true">#</a> 1. XMLHttpRequest 的基本使用</h3><p>XMLHttpRequest（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以请求服务器上的数据资源， jQuery 中的 Ajax 函数，就是基于 xhr 对象封装出来的</p><h4 id="使用-xhr-发起-get-请求"><a class="header-anchor" href="#使用-xhr-发起-get-请求" aria-hidden="true">#</a> 使用 xhr 发起 GET 请求</h4><p>步骤：</p><ol><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li>调用 xhr.send() 函数</li><li>监听 xhr.onreadystatechange 事件</li></ol><div class="language-jsx"><pre><code><span class="token comment">// 1. 创建 XHR 对象</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2. 调用 open 函数，指定 请求方式 与 URL地址</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/getbooks&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3. 调用 send 函数，发起 Ajax 请求</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 监听 onreadystatechange 事件</span>\nxhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 4.1 监听 xhr 对象的请求状态 readyState ；与服务器响应的状态 status</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 4.2 打印服务器响应回来的数据</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用xhr发起带参数的GET请求</span>\n<span class="token comment">// ...省略不必要的代码</span>\n<span class="token comment">// 使用 xhr 对象发起带参数的 GET 请求时，只需在调用 xhr.open 期间，为 URL 地址指定参数即可</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/getbooks?id=1&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// ...省略不必要的代码</span>\n\n<span class="token comment">// 这种在 URL 地址后面拼接的参数，叫做查询字符串</span>\n</code></pre></div><p>XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态，每个 Ajax 请求必然处于以下状态中的一个：</p><p><img src="https://s4.ax1x.com/2022/02/25/bAdbVJ.png" alt="bAdbVJ.png"></p><p>查询字符串</p><p>定义：查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）</p><p>格式：将英文的 <code>?</code> 放在 URL 的末尾，然后再加上 <code>参数＝值</code> ，想加上多个参数的话，使用 <code>&amp;</code> 符号进行分隔，以这个形式，可以将想要发送给服务器的数据添加到 URL 中</p><div class="language-jsx"><pre><code><span class="token operator">/</span> 不带参数的 <span class="token constant">URL</span> 地址\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token operator">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks\n<span class="token comment">// 带一个参数的 URL 地址</span>\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token operator">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span>\n<span class="token comment">// 带两个参数的 URL 地址</span>\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token operator">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>bookname<span class="token operator">=</span>西游记\n</code></pre></div><p>GET 请求携带参数的本质</p><p>无论使用 $.ajax()，还是使用 $.get()，又或者直接使用 xhr 对象发起 GET 请求，当需要携带参数的时候，本质上，都是直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的</p><div class="language-jsx"><pre><code>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 等价于</span>\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;url?name=zs&amp;age=20&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 等价于</span>\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">&#39;url?name=zs&amp;age=20&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="url-编码与解码"><a class="header-anchor" href="#url-编码与解码" aria-hidden="true">#</a> URL 编码与解码</h4><p>URL 地址中，只允许出现英文相关的字母、标点符号、数字，因此，在 URL 地址中不允许出现中文字符</p><p>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行编码（转义）</p><p>URL 编码的原则：使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符</p><p>URL 编码原则的通俗理解：使用英文字符去表示非英文字符</p><div class="language-jsx"><pre><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token operator">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>bookname<span class="token operator">=</span>西游记\n<span class="token comment">// 经过 URL 编码之后， URL地址变成了如下格式：</span>\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>liulongbin<span class="token punctuation">.</span>top<span class="token operator">:</span><span class="token number">3006</span><span class="token operator">/</span>api<span class="token operator">/</span>getbooks<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>bookname<span class="token operator">=</span><span class="token operator">%</span><span class="token constant">E8</span><span class="token operator">%</span><span class="token constant">A5</span><span class="token operator">%</span><span class="token constant">BF</span><span class="token operator">%</span><span class="token constant">E6</span><span class="token operator">%</span><span class="token constant">B8</span><span class="token operator">%</span><span class="token constant">B8</span><span class="token operator">%</span><span class="token constant">E8</span><span class="token operator">%</span><span class="token constant">AE</span><span class="token operator">%</span><span class="token constant">B0</span>\n</code></pre></div><p>浏览器提供了 URL 编码与解码的 API，分别是：</p><ul><li>encodeURI() 编码的函数</li><li>decodeURI() 解码的函数</li></ul><div class="language-jsx"><pre><code><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;黑马程序员&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 输出字符串 %E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span>\n<span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;%E9%BB%91%E9%A9%AC&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 输出字符串 黑马</span>\n</code></pre></div><p>由于浏览器会自动对 URL 地址进行编码操作，因此，大多数情况下，程序员不需要关心 URL 地址的编码与解码操作</p><h4 id="使用-xhr-发起-post-请求"><a class="header-anchor" href="#使用-xhr-发起-post-请求" aria-hidden="true">#</a> 使用 xhr 发起 POST 请求</h4><p>步骤：</p><ol><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li>设置 Content-Type 属性（固定写法）</li><li>调用 xhr.send() 函数， 同时指定要发送的数据</li><li>监听 xhr.onreadystatechange 事件</li></ol><div class="language-jsx"><pre><code><span class="token comment">// 1. 创建 xhr 对象</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2. 调用 open()</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/addbook&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3. 设置 Content-Type 属性（固定写法）</span>\nxhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 调用 send()，同时将数据以查询字符串的形式，提交给服务器</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;bookname=水浒传&amp;author=施耐庵&amp;publisher=天津图书出版社&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 5. 监听 onreadystatechange 事件</span>\nxhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2-数据交换格式"><a class="header-anchor" href="#_2-数据交换格式" aria-hidden="true">#</a> 2. 数据交换格式</h3><p>数据交换格式，就是服务器端与客户端之间进行数据传输与交换的格式</p><p>前端领域，经常提及的两种数据交换格式分别是 XML 和 JSON，其中 XML 用的非常少，所以，我们重点要学习的数据交换格式就是 JSON</p><h4 id="xml"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h4><p>XML 的英文全称是 EXtensible Markup Language，即可扩展标记语言，因此， XML 和 HTML 类似，也是一种标记语言</p><p><img src="https://s4.ax1x.com/2022/02/25/bAdqa9.png" alt="bAdqa9.png"></p><p>XML 和 HTML 虽然都是标记语言，但是，它们两者之间没有任何的关系</p><ul><li>HTML 被设计用来描述网页上的内容，是网页内容的载体</li><li>XML 被设计用来传输和存储数据，是数据的载体</li></ul><p>缺点</p><ol><li>XML 格式臃肿，和数据无关的代码多，体积大，传输效率低</li><li>在 Javascript 中解析 XML 比较麻烦</li></ol><h4 id="json"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h4><p>概念： JSON 的英文全称是 JavaScript Object Notation，即“JavaScript 对象表示法”，简单来讲，JSON 就是 Javascript 对象和数组的字符串表示法，它使用文本表示一个 JS 对象或数组的信息，因此，JSON 的本质是字符串</p><p>作用： JSON 是一种轻量级的文本数据交换格式，在作用上类似于 XML，专门用于存储和传输数据，但是 JSON 比 XML 更小、 更快、 更易解析</p><p>现状： JSON 是在 2001 年开始被推广和使用的数据格式，到现今为止，JSON 已经成为了主流的数据交换格式</p><p>JSON 的两种结构</p><p>JSON 中包含对象和数组两种结构，通过这两种结构的相互嵌套，可以表示各种复杂的数据结构</p><p>对象结构：</p><p>对象结构在 JSON 中表示为 <code>{ }</code> 括起来的内容，数据结构为 <code>{ key: value, key: value, … }</code> 的键值对结构，其中， key 必须是使用英文的双引号包裹的字符串， value 的数据类型可以是数字、字符串、布尔值、null、数组、对象 6 种类型</p><div class="language-jsx"><pre><code><span class="token punctuation">{</span>\n\t\t<span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span>\n\t\t<span class="token string">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n\t\t<span class="token string">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>\n\t\t<span class="token string">&quot;address&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\t\t<span class="token string">&quot;hobby&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;打豆豆&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>数组结构：</p><p>数组结构在 JSON 中表示为 <code>[ ]</code> 括起来的内容</p><p>数据结构为 <code>[ &quot;java&quot;, &quot;javascript&quot;, 30, true … ]</code></p><p>数组中数据的类型可以是数字、字符串、布尔值、null、数组、对象 6 种类型</p><div class="language-jsx"><pre><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;php&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300.5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;苹果&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;榴莲&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;椰子&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre></div><p>JSON 语法注意事项</p><ol><li>属性名必须使用双引号包裹</li><li>字符串类型的值必须使用双引号包裹</li><li>JSON 中不允许使用单引号表示字符串</li><li>JSON 中不能写注释</li><li>JSON 的最外层必须是对象或数组格式</li><li>不能使用 undefined 或函数作为 JSON 的值</li></ol><p>JSON 的作用：在计算机与网络之间存储和传输数据</p><p>JSON 的本质：用字符串来表示 Javascript 对象数据或数组数据</p><p>JSON 和 JS 对象的关系</p><p>SON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串</p><div class="language-jsx"><pre><code><span class="token comment">//这是一个对象</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">//这是一个 JSON 字符串，本质是一个字符串</span>\n<span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">&#39;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&#39;</span>\n</code></pre></div><p>JSON 和 JS 对象的互转</p><div class="language-jsx"><pre><code><span class="token comment">// 要实现从 JSON 字符串转换为 JS 对象，使用 JSON.parse() 方法</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">//结果是 {a: &#39;Hello&#39;, b: &#39;World&#39;}</span>\n\n<span class="token comment">// 要实现从 JS 对象转换为 JSON 字符串，使用 JSON.stringify() 方法</span>\n<span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//结果是 &#39;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&#39;</span>\n</code></pre></div><p>序列化和反序列化</p><ul><li>把数据对象转换为字符串的过程，叫做序列化，例如：调用 <code>JSON.stringify()</code> 函数的操作，叫做 JSON 序列化</li><li>把字符串转换为数据对象的过程，叫做反序列化，例如：调用 <code>JSON.parse()</code> 函数的操作，叫做 JSON 反序列化</li></ul><h3 id="_3-xmlhttprequest-level2-的新特性"><a class="header-anchor" href="#_3-xmlhttprequest-level2-的新特性" aria-hidden="true">#</a> 3. XMLHttpRequest Level2 的新特性</h3><p>旧版 XMLHttpRequest 的缺点</p><ol><li>只支持文本数据的传输，无法用来读取和上传文件</li><li>传送和接收数据时，没有进度信息，只能提示有没有完成</li></ol><p>XMLHttpRequest Level2 的新功能</p><ol><li>可以设置 HTTP 请求的时限</li><li>可以使用 FormData 对象管理表单数据</li><li>可以上传文件</li><li>可以获得数据传输的进度信息</li></ol><h4 id="设置-http-请求时限"><a class="header-anchor" href="#设置-http-请求时限" aria-hidden="true">#</a> <strong>设置 HTTP 请求时限</strong></h4><p>新版本的 XMLHttpRequest 对象，增加了 timeout 属性，可以设置 HTTP 请求的时限：</p><div class="language-jsx"><pre><code>xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span>\n</code></pre></div><p>上面的语句，将最长等待时间设为 3000 毫秒，过了这个时限，就自动停止 HTTP 请求</p><p>与之配套的还有一个 timeout 事件，用来指定回调函数：</p><div class="language-jsx"><pre><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;请求超时！ &#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="formdata-对象管理表单数据"><a class="header-anchor" href="#formdata-对象管理表单数据" aria-hidden="true">#</a> <strong>FormData 对象管理表单数据</strong></h4><p>Ajax 操作往往用来提交表单数据，为了方便表单处理， HTML5 新增了一个 FormData 对象，可以模拟表单操作：</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 新建 FormData 对象</span>\n<span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 2. 为 FormData 添加表单项</span>\nfd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">)</span>\nfd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;upwd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3. 创建 XHR 对象</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 指定请求类型与URL地址</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/formdata&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 5. 直接提交 FormData 对象，这与提交网页表单的效果，完全一样</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>\n</code></pre></div><p>FormData 对象也可以用来获取网页表单的值，示例代码如下：</p><div class="language-jsx"><pre><code><span class="token comment">// 获取表单元素</span>\n<span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#form1&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 监听表单元素的 submit 事件</span>\nform<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 根据 form 表单创建 FormData 对象，会自动将表单数据填充到 FormData 对象中</span>\n  <span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>\n  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/formdata&#39;</span><span class="token punctuation">)</span>\n  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>\n  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="上传文件"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> <strong>上传文件</strong></h4><p>新版 XMLHttpRequest 对象，不仅可以发送文本信息，还可以上传文件</p><p>实现步骤：</p><ol><li><p>定义 UI 结构</p><div class="language-jsx"><pre><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1.</span> 文件选择框 <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.</span> 上传按钮 <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btnUpload<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">上传文件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3.</span> 显示上传到服务器上的图片 <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>800<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre></div></li><li><p>验证是否选择了文件</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 获取上传文件的按钮</span>\n<span class="token keyword">var</span> btnUpload <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#btnUpload&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 为按钮添加 click 事件监听</span>\nbtnUpload<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 3. 获取到选择的文件列表</span>\n  <span class="token keyword">var</span> files <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#file1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;请选择要上传的文件！ &#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...后续业务逻辑</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>向 FormData 中追加文件</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 创建 FormData 对象</span>\n<span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 向 FormData 中追加文件</span>\nfd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;avatar&#39;</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>使用 xhr 发起上传文件的请求</p><div class="language-jsx"><pre><code><span class="token comment">// 1. 创建 xhr 对象</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 调用 open 函数，指定请求类型与URL地址 其中，请求类型必须为 POST</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/upload/avatar&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 3. 发起请求</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>\n</code></pre></div></li><li><p>监听 onreadystatechange 事件</p><div class="language-jsx"><pre><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 上传文件成功</span>\n      <span class="token comment">// 将服务器返回的图片地址，设置为 &lt;img&gt; 标签的 src 属性</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://www.liulongbin.top:3006&#39;</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>url\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 上传文件失败</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol><h4 id="显示文件上传进度"><a class="header-anchor" href="#显示文件上传进度" aria-hidden="true">#</a> 显示文件上传进度</h4><p>新版本的 XMLHttpRequest 对象中，可以通过监听 <code>xhr.upload.onprogress</code> 事件，来获取到文件的上传进度</p><p>语法格式如下：</p><div class="language-jsx"><pre><code><span class="token comment">// 创建 XHR 对象</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 监听 xhr.upload 的 onprogress 事件</span>\nxhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// e.loaded 已传输的字节</span>\n    <span class="token comment">// e.total 需传输的总字节</span>\n    <span class="token keyword">var</span> percentComplete <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>监听上传完成的事件</p><div class="language-jsx"><pre><code>xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#percent&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// 移除上传中的类样式</span>\n    <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 添加上传完成的类样式</span>\n    <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&#39;progress-bar progress-bar-success&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_4-axios"><a class="header-anchor" href="#_4-axios" aria-hidden="true">#</a> 4. axios</h3><p>Axios 是专注于网络数据请求的库</p><p>相比于原生的 XMLHttpRequest 对象， axios 简单易用</p><p>相比于 jQuery，axios 更加轻量化，只专注于网络数据请求</p><h4 id="axios-发起-get-请求"><a class="header-anchor" href="#axios-发起-get-请求" aria-hidden="true">#</a> axios 发起 GET 请求</h4><div class="language-jsx"><pre><code>axios\n  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">/*参数*/</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 请求的 URL 地址</span>\n<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/get&#39;</span>\n<span class="token comment">// 请求的参数对象</span>\n<span class="token keyword">var</span> paramsObj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>\n<span class="token comment">// 调用 axios.get() 发起 GET 请求</span>\naxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> paramsObj <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// res.data 是服务器返回的数据</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="axios-发起-post-请求"><a class="header-anchor" href="#axios-发起-post-请求" aria-hidden="true">#</a> axios 发起 POST 请求</h4><div class="language-jsx"><pre><code>axios\n  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*参数*/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 请求的 URL 地址</span>\n<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/post&#39;</span>\n<span class="token comment">// 要提交到服务器的数据</span>\n<span class="token keyword">var</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span> location<span class="token operator">:</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token string">&#39;顺义&#39;</span> <span class="token punctuation">}</span>\n<span class="token comment">// 调用 axios.post() 发起 POST 请求</span>\naxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dataObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// res.data 是服务器返回的数据</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="直接使用-axios-发起请求"><a class="header-anchor" href="#直接使用-axios-发起请求" aria-hidden="true">#</a> 直接使用 axios 发起请求</h4><p>axios 也提供了类似于 jQuery 中 $.ajax() 的函数，语法如下：</p><div class="language-jsx"><pre><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;请求类型&#39;</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;请求的URL地址&#39;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* POST数据 */</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* GET参数 */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/get&#39;</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// GET 参数要通过 params 属性提供</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">20</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;http://www.liulongbin.top:3006/api/post&#39;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// POST 数据要通过 data 属性提供</span>\n    bookname<span class="token operator">:</span> <span class="token string">&#39;程序员的自我修养&#39;</span><span class="token punctuation">,</span>\n    price<span class="token operator">:</span> <span class="token number">666</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="四、跨域与-jsonp"><a class="header-anchor" href="#四、跨域与-jsonp" aria-hidden="true">#</a> 四、跨域与 JSONP</h2><h3 id="_1-了解同源策略和跨域"><a class="header-anchor" href="#_1-了解同源策略和跨域" aria-hidden="true">#</a> 1. 了解同源策略和跨域</h3><p>如果两个页面的协议，域名和端口都相同，则两个页面具有相同的源</p><p>例如，下表给出了相对于 <a href="http://www.test.com/index.html" target="_blank" rel="noopener noreferrer">http://www.test.com/index.html</a> 页面的同源检测：</p><p><img src="https://s4.ax1x.com/2022/02/25/bAdL5R.png" alt="bAdL5R.png"></p><h4 id="同源策略"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h4><p>同源策略（英文全称 Same origin policy）是浏览器提供的一个安全功能</p><p>MDN 官方给定的概念：同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互，这是一个用于隔离潜在恶意文件的重要安全机制</p><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><ol><li>无法读取非同源网页的 Cookie、 LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 Ajax 请求</li></ol><h4 id="跨域"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h4><p>同源指的是两个 URL 的协议、域名、端口一致，反之，则是跨域</p><p>出现跨域的根本原因：浏览器的同源策略不允许非同源的 URL 之间进行资源的交互</p><p>网页： <a href="http://www.test.com/index.html" target="_blank" rel="noopener noreferrer">http://www.test.com/index.html</a></p><p>接口： <a href="http://www.api.com/userlist" target="_blank" rel="noopener noreferrer">http://www.api.com/userlist</a></p><p>注意：浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p><p>如何实现跨域数据请求</p><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 JSONP 和 CORS</p><p>JSONP：出现的早，兼容性好（兼容低版本 IE），是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案，缺点是只支持 GET 请求，不支持 POST 请求</p><p>CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的根本解决方案，支持 GET 和 POST 请求，缺点是不兼容某些低版本的浏览器</p><h3 id="_2-jsonp"><a class="header-anchor" href="#_2-jsonp" aria-hidden="true">#</a> 2. JSONP</h3><p>JSONP (JSON with Padding) 是 JSON 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题</p><p>实现原理：</p><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据，但是 <code>&lt;script&gt;</code> 标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本</p><p>因此， JSONP 的实现原理，就是通过 <code>&lt;script&gt;</code> 标签的 src 属性，请求跨域的数据接口，并通过函数调用的形式，接收跨域接口响应回来的数据</p><h4 id="自己实现一个简单的-jsonp"><a class="header-anchor" href="#自己实现一个简单的-jsonp" aria-hidden="true">#</a> 自己实现一个简单的 JSONP</h4><p>定义一个 success 回调函数：</p><div class="language-jsx"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\tfunction success(data) {\n\t\t\t\tconsole.log(&#39;获取到了data数据： &#39;)\n\t\t\t\tconsole.log(data)\n\t\t}\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>通过 <code>&lt;script&gt;</code> 标签，请求接口数据：</p><div class="language-jsx"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>\n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://ajax.frontend.itheima.net:3006/api/jsonp?callback=success&amp;name=zs&amp;a\nge=20<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>由于 JSONP 是通过 <code>&lt;script&gt;</code> 标签的 src 属性，来实现跨域数据获取的，所以， JSONP 只支持 GET 数据请求，不支持 POST 请求</p><p>注意： JSONP 和 Ajax 之间没有任何关系，不能把 JSONP 请求数据的方式叫做 Ajax，因为 JSONP 没有用到 XMLHttpRequest 这个对象</p><h2 id="五、http"><a class="header-anchor" href="#五、http" aria-hidden="true">#</a> 五、HTTP</h2><p>通信，就是信息的传递和交换</p><p>通信三要素：</p><ul><li>通信的主体</li><li>通信的内容</li><li>通信的方式</li></ul><p>互联网中的通信：服务器把数据通过响应的方式发送给客户端浏览器</p><p>通信的主体是服务器和客户端浏览器；</p><p>通信的内容是数据；</p><p>通信的方式是响应；</p><p>通信协议（Communication Protocol） 是指通信的双方完成通信所必须遵守的规则和约定</p><p>通俗的理解：通信双方采用约定好的格式来发送和接收消息，这种事先约定好的通信格式，就叫做通信协议</p><p>客户端与服务器之间要实现网页内容的传输，则通信的双方必须遵守网页内容的传输协议</p><p>网页内容又叫做超文本，因此网页内容的传输协议又叫做超文本传输协议（HyperText Transfer Protocol），简称 HTTP 协议</p><p>HTTP 协议的交互模型</p><p>请求——响应</p><p><img src="https://s4.ax1x.com/2022/02/25/bAdXP1.png" alt="bAdXP1.png"></p><h3 id="_1-http-请求消息"><a class="header-anchor" href="#_1-http-请求消息" aria-hidden="true">#</a> 1. HTTP 请求消息</h3><p>因此， 客户端发起的请求叫做 HTTP 请求，客户端发送到服务器的消息，叫做 HTTP 请求消息</p><p>注意： HTTP 请求消息又叫做 HTTP 请求报文</p><p>HTTP 请求消息由请求行（request line）、请求头部（ header ）、空行和请求体 4 个部分组成</p><p><img src="https://s4.ax1x.com/2022/02/25/bAdv26.png" alt="bAdv26.png"></p><h4 id="请求行"><a class="header-anchor" href="#请求行" aria-hidden="true">#</a> 请求行</h4><p>请求行由请求方式、 URL 和 HTTP 协议版本 3 个部分组成，他们之间使用空格隔开</p><p><img src="https://s4.ax1x.com/2022/02/25/bAdj8x.png" alt="bAdj8x.png"></p><h4 id="请求头部"><a class="header-anchor" href="#请求头部" aria-hidden="true">#</a> 请求头部</h4><p>请求头部用来描述客户端的基本信息，从而把客户端相关的信息告知服务器</p><p>比如：User-Agent 用来说明当前是什么类型的浏览器；Content-Type 用来描述发送到服务器的数据格式；Accept 用来描述客户端能够接收什么类型的返回内容；Accept-Language 用来描述客户端期望接收哪种人类语言的文本内容</p><p>请求头部由多行键/值对组成，每行的键和值之间用英文的冒号分隔</p><p>常见的请求头字段</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwSKO.png" alt="bAwSKO.png"></p><p><img src="https://s4.ax1x.com/2022/02/25/bAdxxK.png" alt="bAdxxK.png"></p><h4 id="空行"><a class="header-anchor" href="#空行" aria-hidden="true">#</a> 空行</h4><p>最后一个请求头字段的后面是一个空行，通知服务器请求头部至此结束</p><p>请求消息中的空行，用来分隔请求头部与请求体</p><h4 id="请求体"><a class="header-anchor" href="#请求体" aria-hidden="true">#</a> 请求体</h4><p>请求体中存放的，是要通过 POST 方式提交到服务器的数据</p><p>注意：只有 POST 请求才有请求体， GET 请求没有请求体！</p><h3 id="_2-http-响应消息"><a class="header-anchor" href="#_2-http-响应消息" aria-hidden="true">#</a> 2. HTTP 响应消息</h3><p>响应消息就是服务器响应给客户端的消息内容，也叫作响应报文</p><p>HTTP 响应消息由状态行、响应头部、空行和响应体 4 个部分组成，如下图所示</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwprD.png" alt="bAwprD.png"></p><h4 id="状态行"><a class="header-anchor" href="#状态行" aria-hidden="true">#</a> 状态行</h4><p>状态行由 HTTP 协议版本、状态码和状态码的描述文本 3 个部分组成，他们之间使用空格隔开;</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwiad.png" alt="bAwiad.png"></p><h4 id="响应头部"><a class="header-anchor" href="#响应头部" aria-hidden="true">#</a> 响应头部</h4><p>响应头部用来描述服务器的基本信息，响应头部由多行键/值对组成，每行的键和值之间用英文的冒号分隔</p><p>常见的响应头字段</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwPVH.png" alt="bAwPVH.png"></p><h4 id="空行-2"><a class="header-anchor" href="#空行-2" aria-hidden="true">#</a> 空行</h4><p>在最后一个响应头部字段结束之后，会紧跟一个空行，用来通知客户端响应头部至此结束</p><p>响应消息中的空行，用来分隔响应头部与响应体</p><h4 id="响应体"><a class="header-anchor" href="#响应体" aria-hidden="true">#</a> 响应体</h4><p>响应体中存放的，是服务器响应给客户端的资源内容</p><p><img src="https://s4.ax1x.com/2022/02/25/bAw9qe.png" alt="bAw9qe.png"></p><h3 id="_3-http-请求方法"><a class="header-anchor" href="#_3-http-请求方法" aria-hidden="true">#</a> 3. HTTP 请求方法</h3><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：用来表明要对服务器上的资源执行的操作</p><p>最常用的请求方法是 GET 和 POST</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwEGt.png" alt="bAwEGt.png"></p><h3 id="_4-http-响应状态码"><a class="header-anchor" href="#_4-http-响应状态码" aria-hidden="true">#</a> 4. HTTP 响应状态码</h3><p>HTTP 响应状态码（HTTP Status Code），也属于 HTTP 协议的一部分， 用来标识响应的状态</p><p>响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次 HTTP 请求的结果是成功还是失败了</p><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字用来对状态码进行细分</p><p>HTTP 状态码共分为 5 种类型：</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwFIA.png" alt="bAwFIA.png"></p><h4 id="常见的-http-响应状态码"><a class="header-anchor" href="#常见的-http-响应状态码" aria-hidden="true">#</a> 常见的 HTTP 响应状态码</h4><ol><li><p>2** 成功相关的响应状态码</p><p>表示服务器已成功接收到请求并进行处理，常见的 2** 类型的状态码如下：</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwAPI.png" alt="bAwAPI.png"></p></li><li><p>3** 重定向相关的响应状态码</p><p>表示表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求，常见的 3**</p><p>类型的状态码如下：</p><p><img src="https://s4.ax1x.com/2022/02/25/bAwZxf.png" alt="bAwZxf.png"></p></li><li><p>4** 客户端错误相关的响应状态码</p><p>表示客户端的请求有非法内容，从而导致这次请求失败，常见的 4** 类型的状态码如下： <img src="https://s4.ax1x.com/2022/02/25/bAwVRP.png" alt="bAwVRP.png"></p></li><li><p>5** 服务端错误相关的响应状态码</p><p>表示服务器未能正常处理客户端的请求而出现意外错误，常见的 5** 类型的状态码如下： <img src="https://s4.ax1x.com/2022/02/25/bAwnsS.png" alt="bAwnsS.png"></p></li></ol>',235);c.render=function(p,t,e,c,g,m){return o(),n("div",null,[l,s("p",null,[u,s("code",null,a(),1),i,s("code",null,a(),1),k,s("code",null,a(),1),r]),d])};export default c;export{e as __pageData};
