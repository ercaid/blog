import{g as n,j as s,t as a,G as t,l as p,f as e}from"./common-bec3f312.js";const o='{"title":"前端笔记 | Vue3","frontmatter":{"date":"2022-01-28","title":"前端笔记 | Vue3","tags":["前端笔记","Vue3"],"describe":"Vue3 学习笔记"},"headers":[{"level":2,"title":"Vue3 快速上手","slug":"vue3-快速上手"},{"level":3,"title":"1.Vue3 简介","slug":"_1-vue3-简介"},{"level":3,"title":"2.Vue3 带来了什么","slug":"_2-vue3-带来了什么"},{"level":2,"title":"一、创建 Vue3.0 工程","slug":"一、创建-vue3-0-工程"},{"level":3,"title":"1.使用 vue-cli 创建","slug":"_1-使用-vue-cli-创建"},{"level":3,"title":"2.使用 vite 创建","slug":"_2-使用-vite-创建"},{"level":2,"title":"二、常用 Composition API","slug":"二、常用-composition-api"},{"level":3,"title":"1.拉开序幕的 setup","slug":"_1-拉开序幕的-setup"},{"level":3,"title":"2.ref 函数","slug":"_2-ref-函数"},{"level":3,"title":"3.reactive 函数","slug":"_3-reactive-函数"},{"level":3,"title":"4.Vue3.0 中的响应式原理","slug":"_4-vue3-0-中的响应式原理"},{"level":3,"title":"5.reactive 对比 ref","slug":"_5-reactive-对比-ref"},{"level":3,"title":"6.setup 的两个注意点","slug":"_6-setup-的两个注意点"},{"level":3,"title":"7.计算属性与监视","slug":"_7-计算属性与监视"},{"level":3,"title":"8.生命周期","slug":"_8-生命周期"},{"level":3,"title":"9.自定义 hook 函数","slug":"_9-自定义-hook-函数"},{"level":3,"title":"10.toRef","slug":"_10-toref"},{"level":2,"title":"三、其它 Composition API","slug":"三、其它-composition-api"},{"level":3,"title":"1.shallowReactive 与 shallowRef","slug":"_1-shallowreactive-与-shallowref"},{"level":3,"title":"2.readonly 与 shallowReadonly","slug":"_2-readonly-与-shallowreadonly"},{"level":3,"title":"3.toRaw 与 markRaw","slug":"_3-toraw-与-markraw"},{"level":3,"title":"4.customRef","slug":"_4-customref"},{"level":3,"title":"5.provide 与 inject","slug":"_5-provide-与-inject"},{"level":3,"title":"6.响应式数据的判断","slug":"_6-响应式数据的判断"},{"level":2,"title":"四、Composition API 的优势","slug":"四、composition-api-的优势"},{"level":3,"title":"1.Options API 存在的问题","slug":"_1-options-api-存在的问题"},{"level":3,"title":"2.Composition API 的优势","slug":"_2-composition-api-的优势"},{"level":2,"title":"五、新的组件","slug":"五、新的组件"},{"level":3,"title":"1.Fragment","slug":"_1-fragment"},{"level":3,"title":"2.Teleport","slug":"_2-teleport"},{"level":3,"title":"3.Suspense","slug":"_3-suspense"},{"level":2,"title":"六、其他","slug":"六、其他"},{"level":3,"title":"1.全局 API 的转移","slug":"_1-全局-api-的转移"},{"level":3,"title":"2.其他改变","slug":"_2-其他改变"}],"relativePath":"docs/vue3.md","lastUpdated":1645348477860.4568}';var c={};const l=t('<h2 id="vue3-快速上手"><a class="header-anchor" href="#vue3-快速上手" aria-hidden="true">#</a> Vue3 快速上手</h2><h3 id="_1-vue3-简介"><a class="header-anchor" href="#_1-vue3-简介" aria-hidden="true">#</a> 1.Vue3 简介</h3><ul><li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）</li><li>耗时 2 年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity" target="_blank" rel="noopener noreferrer">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs" target="_blank" rel="noopener noreferrer">30+个 RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+" target="_blank" rel="noopener noreferrer">600+次 PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors" target="_blank" rel="noopener noreferrer">99 位贡献者</a></li><li>github 上的 tags 地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h3 id="_2-vue3-带来了什么"><a class="header-anchor" href="#_2-vue3-带来了什么" aria-hidden="true">#</a> 2.Vue3 带来了什么</h3><h4 id="_1-性能的提升"><a class="header-anchor" href="#_1-性能的提升" aria-hidden="true">#</a> 1.性能的提升</h4><ul><li><p>打包大小减少 41%</p></li><li><p>初次渲染快 55%, 更新渲染快 133%</p></li><li><p>内存减少 54%</p><p>......</p></li></ul><h4 id="_2-源码的升级"><a class="header-anchor" href="#_2-源码的升级" aria-hidden="true">#</a> 2.源码的升级</h4><ul><li><p>使用 Proxy 代替 defineProperty 实现响应式</p></li><li><p>重写虚拟 DOM 的实现和 Tree-Shaking</p><p>......</p></li></ul><h4 id="_3-拥抱-typescript"><a class="header-anchor" href="#_3-拥抱-typescript" aria-hidden="true">#</a> 3.拥抱 TypeScript</h4><ul><li>Vue3 可以更好的支持 TypeScript</li></ul><h4 id="_4-新的特性"><a class="header-anchor" href="#_4-新的特性" aria-hidden="true">#</a> 4.新的特性</h4><ol><li><p>Composition API（组合 API）</p><ul><li>setup 配置</li><li>ref 与 reactive</li><li>watch 与 watchEffect</li><li>provide 与 inject</li><li>......</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除 keyCode 支持作为 v-on 的修饰符</li><li>组件中模板不再需要根标签包裹（可放置多个标签）</li><li>......</li></ul></li></ol><h2 id="一、创建-vue3-0-工程"><a class="header-anchor" href="#一、创建-vue3-0-工程" aria-hidden="true">#</a> 一、创建 Vue3.0 工程</h2><h3 id="_1-使用-vue-cli-创建"><a class="header-anchor" href="#_1-使用-vue-cli-创建" aria-hidden="true">#</a> 1.使用 vue-cli 创建</h3><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noopener noreferrer">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><div class="language-bash"><pre><code><span class="token comment">### 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>\nvue --version\n<span class="token comment">### 安装或者升级你的@vue/cli</span>\n<span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli\n<span class="token comment">### 创建</span>\nvue create vue_test\n<span class="token comment">### 启动</span>\n<span class="token builtin class-name">cd</span> vue_test\n<span class="token function">npm</span> run serve\n</code></pre></div><h3 id="_2-使用-vite-创建"><a class="header-anchor" href="#_2-使用-vite-创建" aria-hidden="true">#</a> 2.使用 vite 创建</h3><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite" target="_blank" rel="noopener noreferrer">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite 官网：<a href="https://vitejs.cn" target="_blank" rel="noopener noreferrer">https://vitejs.cn</a></p><ul><li>什么是 vite？—— 新一代前端构建工具。</li><li>优势如下： <ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite 构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;"><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:500px;height:280px;"></p><div class="language-bash"><pre><code><span class="token comment">### 创建工程</span>\n<span class="token function">npm</span> init vite-app <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span>\n<span class="token comment">### 进入工程目录</span>\n<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span>\n<span class="token comment">### 安装依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span>\n<span class="token comment">### 运行</span>\n<span class="token function">npm</span> run dev\n</code></pre></div><h2 id="二、常用-composition-api"><a class="header-anchor" href="#二、常用-composition-api" aria-hidden="true">#</a> 二、常用 Composition API</h2><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html" target="_blank" rel="noopener noreferrer">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h3 id="_1-拉开序幕的-setup"><a class="header-anchor" href="#_1-拉开序幕的-setup" aria-hidden="true">#</a> 1.拉开序幕的 setup</h3><ol><li>理解：Vue3.0 中一个新的配置项，值为一个函数。</li><li>setup 是所有<strong style="color:#DD5145;">Composition API（组合 API）</strong><i style="color:gray;font-weight:bold;">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在 setup 中。</li></ol><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 此处只是测试一下setup，暂时不考虑响应式的问题</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 数据</span>\n    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>\n    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment">// 方法</span>\n\n    <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，我</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了，你好啊！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">,</span>\n      age<span class="token punctuation">,</span>\n      sayHello\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><ol start="4"><li><p>setup 函数的两种返回值：</p><ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad;">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li><p>注意点：</p><ol><li>可以，但尽量不要与 Vue2.x 配置混用 <ul><li>Vue2.x 配置（data、methos、computed...）中<strong style="color:#DD5145;">可以访问到</strong>setup 中的属性、方法。</li><li>但在 setup 中<strong style="color:#DD5145;">不能访问到</strong>Vue2.x 配置（data、methos、computed...）。</li><li>如果有重名, setup 优先。</li></ul></li><li>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</li></ol></li><li><p>语法糖</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><pre><code>\t- 自定义组件 import 后可以直接使用\n</code></pre><ul><li><p>使用 <code>defineProps</code> 和 <code>defineEmits</code> API 来声明 <code>props</code> 和 <code>emits</code></p><div class="language-"><pre><code>const props = defineProps({\n\tmsg: String\n})\n</code></pre></div><pre><code>- 顶层可以直接使用 await，以前需要加 async\n</code></pre></li></ul></li></ol><h3 id="_2-ref-函数"><a class="header-anchor" href="#_2-ref-函数" aria-hidden="true">#</a> 2.ref 函数</h3>',29),u=s("li",null,"作用: 定义一个响应式的数据",-1),i=p("语法: "),r=s("code",null,"const xxx = ref(initValue)",-1),k=s("li",null,[p("创建一个包含响应式数据的"),s("strong",{style:{color:"#DD5145"}},"引用对象（reference 对象，简称 ref 对象）"),p("。")],-1),d=s("li",null,[p("JS 中操作数据： "),s("code",null,"xxx.value")],-1),g=p("模板中读取数据: 不需要.value，直接："),h=t('<li>备注： <ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold;">“ 求助 ”</i> 了 Vue3.0 中的一个新函数—— <code>reactive</code>函数。</li></ul></li>',1),m=t('<div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>一个人的信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>姓名: {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>年龄: {{ age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>工作：{{ job.type }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>薪资：{{ job.salary }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>changeInfo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>修改信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 数据</span>\n    <span class="token comment">// 生成的是 RefImpl 的实例对象</span>\n    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>\n    <span class="token comment">// 生成的是 Proxy 对象</span>\n    <span class="token keyword">let</span> job <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token operator">:</span> <span class="token string">&#39;前端工程师&#39;</span><span class="token punctuation">,</span>\n      salary<span class="token operator">:</span> <span class="token string">&#39;30K&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// 方法</span>\n    <span class="token keyword">function</span> <span class="token function">changeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>\n      age<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">48</span>\n      job<span class="token punctuation">.</span>value<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;UI工程师&#39;</span>\n      job<span class="token punctuation">.</span>value<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token string">&#39;60k&#39;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">,</span>\n      age<span class="token punctuation">,</span>\n      job<span class="token punctuation">,</span>\n      changeInfo\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="_3-reactive-函数"><a class="header-anchor" href="#_3-reactive-函数" aria-hidden="true">#</a> 3.reactive 函数</h3><ul><li>作用: 定义一个<strong style="color:#DD5145;">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145;">代理对象（Proxy 的实例对象，简称 proxy 对象）</strong></li><li>reactive 定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><div class="language-js"><pre><code><span class="token comment">// 生成的是 Proxy 对象</span>\n<span class="token keyword">let</span> job <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;前端工程师&#39;</span><span class="token punctuation">,</span>\n  salary<span class="token operator">:</span> <span class="token string">&#39;30K&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> hobby <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 方法</span>\n<span class="token keyword">function</span> <span class="token function">changeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>\n  age<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">48</span>\n  job<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;UI工程师&#39;</span>\n  job<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token string">&#39;60k&#39;</span>\n  hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;学习&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_4-vue3-0-中的响应式原理"><a class="header-anchor" href="#_4-vue3-0-中的响应式原理" aria-hidden="true">#</a> 4.Vue3.0 中的响应式原理</h3><h4 id="vue2-x-的响应式"><a class="header-anchor" href="#vue2-x-的响应式" aria-hidden="true">#</a> vue2.x 的响应式</h4><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><div class="language-js"><pre><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。 解决方法：<code>this.$set(this.person, &#39;sex&#39;, &#39;女&#39;)</code> 或者 <code>Vue.set()</code><code>this.$delete()</code> 数组调 <code>this.person.hobby.splice(0,1,&#39;逛街&#39;)</code></li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h4 id="vue3-0-的响应式"><a class="header-anchor" href="#vue3-0-的响应式" aria-hidden="true">#</a> Vue3.0 的响应式</h4><ul><li><p>实现原理:</p><ul><li><p>通过 Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过 Reflect（反射）: 对源对象的属性进行操作。</p></li><li><p>MDN 文档中描述的 Proxy 与 Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 拦截读取属性值 target就是data（源数据），prop是读取的属性</span>\n  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 拦截设置属性值</span>\n  <span class="token comment">// 或添加新属性都会调用</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 拦截删除属性</span>\n  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nproxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;tom&#39;</span>\n</code></pre></div></li></ul></li></ul></li></ul><h3 id="_5-reactive-对比-ref"><a class="header-anchor" href="#_5-reactive-对比-ref" aria-hidden="true">#</a> 5.reactive 对比 ref</h3><ul><li>从定义数据角度对比： <ul><li>ref 用来定义：<strong style="color:#DD5145;">基本类型数据</strong>。</li><li>reactive 用来定义：<strong style="color:#DD5145;">对象（或数组）类型数据</strong>。</li><li>备注：ref 也可以用来定义<strong style="color:#DD5145;">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145;">代理对象</strong>。</li></ul></li><li>从原理角度对比： <ul><li>ref 通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive 通过使用<strong style="color:#DD5145;">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145;">Reflect</strong>操作<strong style="color:orange;">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比： <ul><li>ref 定义的数据：操作数据<strong style="color:#DD5145;">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145;">不需要</strong><code>.value</code>。</li><li>reactive 定义的数据：操作数据与读取数据：<strong style="color:#DD5145;">均不需要</strong><code>.value</code>。</li></ul></li></ul><h3 id="_6-setup-的两个注意点"><a class="header-anchor" href="#_6-setup-的两个注意点" aria-hidden="true">#</a> 6.setup 的两个注意点</h3><ul><li>setup 执行的时机 <ul><li>在 beforeCreate 之前执行一次，this 是 undefined。</li></ul></li><li>setup 的参数 <ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象 <ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><div class="language-js"><pre><code>props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\nemits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tcontext<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_7-计算属性与监视"><a class="header-anchor" href="#_7-计算属性与监视" aria-hidden="true">#</a> 7.计算属性与监视</h3><h4 id="_1-computed-函数"><a class="header-anchor" href="#_1-computed-函数" aria-hidden="true">#</a> 1.computed 函数</h4><ul><li><p>与 Vue2.x 中 computed 配置功能一致</p></li><li><p>写法</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>computed<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n\n<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n\t<span class="token comment">// 计算属性——简写</span>\n    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 计算属性——完整</span>\n    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t\t\t<span class="token comment">// 计算属性也可以修改</span>\n        <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">const</span> nameArr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>\n            person<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n            person<span class="token punctuation">.</span>lastName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h4 id="_2-watch-函数"><a class="header-anchor" href="#_2-watch-函数" aria-hidden="true">#</a> 2.watch 函数</h4><ul><li><p>与 Vue2.x 中 watch 配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</li><li>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</li></ul><div class="language-js"><pre><code><span class="token comment">//情况一：监视ref定义的响应式数据</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  sum<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sum变化了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> immediate<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token comment">// 立即执行一次</span>\n\n<span class="token comment">//情况二：监视多个ref定义的响应式数据</span>\n<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span> msg<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sum或msg变化了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token comment">// value是一个数组</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">/* 情况三：监视reactive定义的响应式数据的全部属性\n\t\t\t1. 无法正确获得oldValue！（得到的还是新值）\n\t\t  2. 强制开启了深度监视 \n*/</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  person<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person变化了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deep<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token comment">//此处的deep配置不再奏效</span>\n\n<span class="token comment">//情况四：监视reactive定义的响应式数据中的某个属性</span>\n<span class="token comment">//直接person.job不行</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>job<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person的job变化了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">//情况五：监视reactive定义的响应式数据中的某些属性</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>job<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person的job变化了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">//特殊情况，修改的是job里的salary等深层的属性（监测的仍是对象），需要开启deep</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>job<span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person的job变化了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span>\n</code></pre></div></li></ul><h4 id="_3-watcheffect-函数"><a class="header-anchor" href="#_3-watcheffect-函数" aria-hidden="true">#</a> 3.watchEffect 函数</h4><ul><li><p>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect 有点像 computed：</p><ul><li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><div class="language-js"><pre><code><span class="token comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span>\n<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> x1 <span class="token operator">=</span> sum<span class="token punctuation">.</span>value\n  <span class="token keyword">const</span> x2 <span class="token operator">=</span> person<span class="token punctuation">.</span>age\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watchEffect配置的回调执行了&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h3 id="_8-生命周期"><a class="header-anchor" href="#_8-生命周期" aria-hidden="true">#</a> 8.生命周期</h3><div><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2"></div><div><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_3"></div><ul><li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名： <ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0 也提供了 Composition API 形式的生命周期钩子（在 setup 中使用），与 Vue2.x 中钩子对应关系如下： <ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code> 如果同时使用，on 开头的优先级更高</li></ul></li></ul><h3 id="_9-自定义-hook-函数"><a class="header-anchor" href="#_9-自定义-hook-函数" aria-hidden="true">#</a> 9.自定义 hook 函数</h3><ul><li>什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。</li><li>类似于 vue2.x 中的 mixin。</li><li>自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。</li></ul><p>新建文件夹 hooks/usePoint.js</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onBeforeUnmount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//实现鼠标“打点”相关的数据</span>\n  <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    y<span class="token operator">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">//实现鼠标“打点”相关的方法</span>\n  <span class="token keyword">function</span> <span class="token function">savePoint</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point<span class="token punctuation">.</span>x <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX\n    point<span class="token punctuation">.</span>y <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">//实现鼠标“打点”相关的生命周期钩子</span>\n  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> savePoint<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> savePoint<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> point\n<span class="token punctuation">}</span>\n</code></pre></div><p>在需要的 setup 里面调用</p><div class="language-js"><pre><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n <span class="token keyword">import</span> usePoint <span class="token keyword">from</span> <span class="token string">&#39;../hooks/usePoint&#39;</span>\n <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n\t name<span class="token operator">:</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">,</span>\n\t <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t <span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token function">usePoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t <span class="token keyword">return</span> <span class="token punctuation">{</span>point<span class="token punctuation">}</span>\n\t <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><h3 id="_10-toref"><a class="header-anchor" href="#_10-toref" aria-hidden="true">#</a> 10.toRef</h3><ul><li><p>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p>应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><div class="language-js"><pre><code><span class="token keyword">return</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="三、其它-composition-api"><a class="header-anchor" href="#三、其它-composition-api" aria-hidden="true">#</a> 三、其它 Composition API</h2><h3 id="_1-shallowreactive-与-shallowref"><a class="header-anchor" href="#_1-shallowreactive-与-shallowref" aria-hidden="true">#</a> 1.shallowReactive 与 shallowRef</h3><p>对标 reactive 和 ref</p><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h3 id="_2-readonly-与-shallowreadonly"><a class="header-anchor" href="#_2-readonly-与-shallowreadonly" aria-hidden="true">#</a> 2.readonly 与 shallowReadonly</h3><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><div class="language-js"><pre><code>person <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>\n</code></pre></div><h3 id="_3-toraw-与-markraw"><a class="header-anchor" href="#_3-toraw-与-markraw" aria-hidden="true">#</a> 3.toRaw 与 markRaw</h3><ul><li>toRaw： <ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange;">响应式对象</strong>转为<strong style="color:orange;">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw： <ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景: <ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h3 id="_4-customref"><a class="header-anchor" href="#_4-customref" aria-hidden="true">#</a> 4.customRef</h3><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyword<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{ keyword }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> customRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Demo&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// let keyword = ref(&#39;hello&#39;) //使用Vue准备好的内置ref</span>\n    <span class="token comment">//自定义一个myRef</span>\n    <span class="token keyword">function</span> <span class="token function">myRef</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> timer\n      <span class="token comment">//通过customRef去实现自定义</span>\n      <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> trigger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//告诉Vue这个value值是需要被“追踪”的</span>\n            <span class="token keyword">return</span> value\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n              value <span class="token operator">=</span> newValue\n              <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//告诉Vue去更新界面</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> keyword <span class="token operator">=</span> <span class="token function">myRef</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//使用程序员自定义的ref</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      keyword\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ul><h3 id="_5-provide-与-inject"><a class="header-anchor" href="#_5-provide-与-inject" aria-hidden="true">#</a> 5.provide 与 inject</h3><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px;"><ul><li><p>作用：实现<strong style="color:#DD5145;">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token operator">...</span><span class="token operator">...</span>\n    <span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;奔驰&#39;</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token string">&#39;40万&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span>car<span class="token punctuation">)</span>\n    <span class="token operator">...</span><span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>后代组件中：</p><div class="language-js"><pre><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token operator">...</span><span class="token operator">...</span>\n    <span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>car<span class="token punctuation">}</span>\n\t<span class="token operator">...</span><span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ol></li></ul><h3 id="_6-响应式数据的判断"><a class="header-anchor" href="#_6-响应式数据的判断" aria-hidden="true">#</a> 6.响应式数据的判断</h3><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h2 id="四、composition-api-的优势"><a class="header-anchor" href="#四、composition-api-的优势" aria-hidden="true">#</a> 四、Composition API 的优势</h2><h3 id="_1-options-api-存在的问题"><a class="header-anchor" href="#_1-options-api-存在的问题" aria-hidden="true">#</a> 1.Options API 存在的问题</h3><p>使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改 。</p><div><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="height:360px;"></div><div><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="height:360px;"></div><h3 id="_2-composition-api-的优势"><a class="header-anchor" href="#_2-composition-api-的优势" aria-hidden="true">#</a> 2.Composition API 的优势</h3><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image" style="height:360px;"></div><div><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image" style="height:360px;"></div><h2 id="五、新的组件"><a class="header-anchor" href="#五、新的组件" aria-hidden="true">#</a> 五、新的组件</h2><h3 id="_1-fragment"><a class="header-anchor" href="#_1-fragment" aria-hidden="true">#</a> 1.Fragment</h3><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h3 id="_2-teleport"><a class="header-anchor" href="#_2-teleport" aria-hidden="true">#</a> 2.Teleport</h3><ul><li><p>什么是 Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145;">组件 html 结构</strong>移动到指定位置的技术。</p></li><li><p>移动位置是一个选择器，例如 <code>body</code> <code>.mask</code> ...</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>移动位置<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mask<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是一个弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow = false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关闭弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ul><h3 id="_3-suspense"><a class="header-anchor" href="#_3-suspense" aria-hidden="true">#</a> 3.Suspense</h3><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/Child.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是App组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>fallback</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>加载中.....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ul></li></ul><div class="language-js"><pre><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n\t name<span class="token operator">:</span><span class="token string">&#39;Child&#39;</span><span class="token punctuation">,</span>\n\t <span class="token keyword">async</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\t\t <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t\t\t <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t\t\t\t <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t\t <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>\n\t\t <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t <span class="token keyword">return</span> <span class="token keyword">await</span> p\n\t <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="六、其他"><a class="header-anchor" href="#六、其他" aria-hidden="true">#</a> 六、其他</h2><h3 id="_1-全局-api-的转移"><a class="header-anchor" href="#_1-全局-api-的转移" aria-hidden="true">#</a> 1.全局 API 的转移</h3><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><div class="language-js"><pre><code><span class="token comment">//注册全局组件</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;MyButton&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    count<span class="token operator">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;button @click=&quot;count++&quot;&gt;Clicked {{ count }} times.&lt;/button&gt;&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">//注册全局指令</span>\nVue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token parameter">el</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul></li><li><p>Vue3.0 中对这些 API 做出了调整：</p><ul><li><p>将全局的 API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145;">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h3 id="_2-其他改变"><a class="header-anchor" href="#_2-其他改变" aria-hidden="true">#</a> 2.其他改变</h3><ul><li><p>data 选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x 写法</p><div class="language-css"><pre><code><span class="token selector">.v-enter,\n.v-leave-to</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.v-leave,\n.v-enter-to</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>Vue3.x 写法</p><div class="language-css"><pre><code><span class="token selector">.v-enter-from,\n.v-leave-to</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.v-leave-from,\n.v-enter-to</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul></li><li><p><strong style="color:#DD5145;">移除</strong>keyCode 作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145;">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name"><span class="token namespace">v-on:</span>close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleComponentEvent<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleNativeClickEvent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre></div></li><li><p>子组件中声明自定义事件</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ul></li><li><p><strong style="color:#DD5145;">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>......</p></li></ul>',72);c.render=function(t,p,o,c,v,f){return e(),n("div",null,[l,s("ul",null,[u,s("li",null,[i,r,s("ul",null,[k,d,s("li",null,[g,s("code",null,"<div>"+a(t.xxx)+"</div>",1)])])]),h]),m])};export default c;export{o as __pageData};
